doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Light Docs
    meta(name="description", content="An Arduino library to control many lights or LEDs by using commands like on, off, setBrightness, blink, and fade.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        .hidden-xs.col-sm-4.stuck
          include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          .breadcrumb-container.stuck
            ol.breadcrumb
              li
                a(href="index.html") Home
              li
                a(href="docs-arduino.html") Arduino
              li.active(translate="no")
                | Light
            .breadcrumb-icons.pull-right
              .icon-container.pull-right
                a(href="https://github.com/alextaujenis/RBD_Light")
                  .icon
                    .image
                      img(src='assets/images/github-logo.png', alt="GitHub Logo")
                    .text-container
                      .name View Source on GitHub
                      .subtitle With MIT License
              .icon-container.pull-right.download-button(data-toggle="tooltip", data-placement="bottom", title="Click to download the Light library with the Timer dependency")
                a.ga-events(href="assets/downloads/Light.zip", data-name="Light.zip")
                  .icon
                    .image
                      img(src='assets/images/zip-icon.png', alt=".zip icon")
                    .text-container
                      .name Light.zip
                      .subtitle 9KB Download
              .clearfix
            .clearfix
          .jumbotron
            .click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Light
                small(translate="yes") API DOCUMENTATION
              p#RBD_Light
                | Control many lights.
                small.version
              a.btn.btn-primary(href="#example-wiring") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
              | &nbsp;&nbsp;
              a.btn.btn-default(href="https://github.com/alextaujenis/RBD_Light/releases") Release Notes

          .h3
            #overview.anchor
            | Overview
          p.lead
            | Control many lights and blink without delay using commands such as&nbsp;
            a.click-flash(href="#on", translate="no") on()
            | ,&nbsp;
            a.click-flash(href="#off", translate="no") off()
            | ,&nbsp;
            a.click-flash(href="#blink", translate="no") blink()
            | , and&nbsp;
            a.click-flash(href="#fade", translate="no") fade()
            | . Lights can be connected to PWM or Digital Arduino pins to work with this library.
          p.lead
            b PWM pins
            |  are necessary to enable all library features.&nbsp;
            b Digital pins
            |  are supported by this library with special conditions documented in&nbsp;
            a.click-flash(href="#setbrightness", translate="no") setBrightness()
            |  and&nbsp;
            a.click-flash(href="#fade", translate="no") fade().

          .h3
            #example-wiring.anchor
            | Example Wiring
            .example-sketch-buttons.nav-menu.pull-right(style="display:none;")
              label OTHER EXAMPLES:
              .btn-group(role="group")
                a.btn.btn-sm.btn-inverse.nav-item(href="#example-wiring", data-toggle="tooltip", data-placement="bottom", title="Blink", data-target="blink-example") 1
                a.btn.btn-sm.btn-inverse.nav-item(href="#example-wiring", data-toggle="tooltip", data-placement="bottom", title="Fade", data-target="fade-example") 2
              .clearfix
            .clearfix

          ol.blink-example.nav-content
            li
              | Connect the Arduino&nbsp;
              span.ground-wire ground pin
              |  to a resistor calculated for your LED
            li
              | Connect the resistor to the short (negative) LED leg
            li
              | Connect the Arduino&nbsp;
              span.control-wire PWM pin 3
              |  to the long (positive) LED leg
            li
              | Load the&nbsp;
              a(href="#example-sketch")
                | Example&nbsp;
                span(translate="no") Sketch
              |  onto the Arduino
            li
              | Watch the LED blink without delay

          ol.fade-example.nav-content(style="display: none;")
            li
              | Connect the Arduino&nbsp;
              span.ground-wire ground pin
              |  to a resistor calculated for your LED
            li
              | Connect the resistor to the short (negative) LED leg
            li
              | Connect the Arduino&nbsp;
              span.control-wire PWM pin 3
              |  to the long (positive) LED leg
            li
              | Load the&nbsp;
              a(href="#example-sketch")
                | Example&nbsp;
                span(translate="no") Sketch
              |  onto the Arduino
            li
              | Watch the LED fade without delay
          p
            img.img-responsive(src="assets/images/arduino-light-wiring-diagram.png", alt="A LED and resistor wired to an Arduino Micro PWM 3 and ground.")

          .h3
            #example-sketch.anchor
            | Example&nbsp;
            span(translate="no") Sketch
            span.label.label-info Arduino
            span.label.label-primary C++
          .blink-example.nav-content(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Timer.h>
                #include <RBD_Light.h>

                RBD::Light light(3); // PWM pin 3

                void setup() {
                  light.blink(250,250);
                }

                void loop() {
                  light.update();
                }

          .fade-example.nav-content(translate="no", style="display:none;")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Timer.h>
                #include <RBD_Light.h>

                RBD::Light light(3); // PWM pin 3

                void setup() {
                  light.fade(500,250,500,250);
                }

                void loop() {
                  light.update();
                }

          .h3
            #public-methods.anchor
            | Public Methods
          p
            | You can use this library without calling&nbsp;
            a.click-flash(href="#update", translate="no") update()
            |  and&nbsp;
            i most
            |  methods will function correctly. You must continuously call&nbsp;
            a.click-flash(href="#update", translate="no") update()
            |  inside of loop() in order to use the
            span.label.label-success Real-Time
            |  methods tagged below.

          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Light

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor(pin)
            li.divider
            li
              a.click-flash(href="#on") .on()
            li
              a.click-flash(href="#off") .off()
            li
              a.click-flash(href="#setbrightness") .setBrightness(value)
            li
              a.click-flash(href="#setbrightnesspercent") .setBrightnessPercent(value)
            li.divider
            li
              a.click-flash(href="#ison") .isOn()
            li
              a.click-flash(href="#isoff") .isOff()
            li
              a.click-flash(href="#getbrightness") .getBrightness()
            li
              a.click-flash(href="#getbrightnesspercent") .getBrightnessPercent()
            li.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#blink") .blink(on_time, off_time, [times])
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#fade") .fade(up_time, on_time, down_time, off_time, [times])
              include ./global/labels/real-time.jade

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::Light constructor(pin)
            p Create a new light and pass in the PWM or Digital Arduino pin number.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::Light light(3); // PWM pin 3

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #on.anchor
              .light light
              | .on()
            p Turn on the light.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.on();
                  }

          .section
            .method-name(translate="no")
              #off.anchor
              .light light
              | .off()
            p Turn off the light.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.off();
                  }

          .section
            .method-name(translate="no")
              #setbrightness.anchor
              .light light
              | .setBrightness(value)
            p
              b PWM pins:
              |  pass in an integer between 0 - 255 to set the raw brightness of the light.
            p
              b Digital pins:
              |  pass in an integer less than or equal to 127 to turn off the light. Pass in an integer greater than or equal to 128 to turn on the light.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.setBrightness(128); // about 50% brightness
                  }

          .section
            .method-name(translate="no")
              #setbrightnesspercent.anchor
              .light light
              | .setBrightnessPercent(value)
            p
              | Pass in an integer between 0 - 100 to set the percentage brightness of the light. This is the same as&nbsp;
              a.click-flash(href="#setbrightness", translate="no") setBrightness()
              |  except with a smaller input domain.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.setBrightnessPercent(75); // 75% brightness
                  }

          .section
            .method-name(translate="no")
              #ison.anchor
              .light light
              | .isOn()
            p Returns true if the current light brightness is at 100%.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(light.isOn()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #isoff.anchor
              .light light
              | .isOff()
            p Returns true if the current light brightness is at 0%.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(light.isOff()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #getbrightness.anchor
              .light light
              | .getBrightness()
            p Returns an integer from 0 - 255 of the current light raw brightness.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.getBrightness();
                  }

          .section
            .method-name(translate="no")
              #getbrightnesspercent.anchor
              .light light
              | .getBrightnessPercent()
            p
              | Returns an integer from 0 - 100 of the current light percentage brightness. This is the same as&nbsp;
              a.click-flash(href="#getbrightness", translate="no") getBrightness()
              |  except with a smaller output range.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.getBrightnessPercent();
                  }

          .section
            .method-name(translate="no")
              #update.anchor
              .light light
              | .update()
              include ./global/labels/update.jade
            p
              | Keep calculating brightness values over time. This must be called continuously within loop() in order to&nbsp;
              a.click-flash(href="#blink", translate="no") blink()
              |  or&nbsp;
              a.click-flash(href="#fade", translate="no") fade()
              |  the light.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.update();
                  }

          .section
            .method-name(translate="no")
              #blink.anchor
              .light light
              | .blink(on_time, off_time, [times])
              include ./global/labels/real-time.jade
            p
              | Pass in unsigned longs for the on time and off time values in milliseconds. Pass in an integer for the last parameter for the number of times the light should blink, which is [optional] and can be left out to make the light repeat the blink cycle forever.
            ul
              li Light turns ON for the on_time
              li Then turns OFF for the off_time
              li Optionally repeats this cycle for the number of [times]
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    light.blink(1000,500,25);
                  }

                  void loop() {
                    light.update();
                  }

          .section
            .method-name(translate="no")
              #fade.anchor
              .light light
              | .fade(up_time, on_time, down_time, off_time, [times])
              include ./global/labels/real-time.jade
            p
              b PWM pins:
              |  need unsigned longs passed in for the up, on, down, and off time values in milliseconds. Pass in an integer for the last parameter for the number of times the light should fade, which is [optional] and can be left out to make the light repeat the fade cycle forever.
            p
              b Digital pins:
              |  behave the same as PWM pins except they will blink the light (when increasing past 50% brightness) instead of appearing as a linear fade.
            ul
              li Light performs a linear fade UP according to the up_time
              li Stays ON for the on_time
              li Linear fades DOWN over the course of the down_time
              li Stays OFF for the off_time
              li Optionally repeats this cycle for the number of [times]
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    light.fade(2500,250,2000,750,1000);
                  }

                  void loop() {
                    light.update();
                  }

          .bottom-nav.hidden.visible-xs-block
            include ./global/docs-side-nav.jade

    #modal.modal.fade(tabindex='-1', role='dialog')
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') x
            h4#modalLabel.modal-title Library Installation
          .modal-body
            .install-step
              h3 Step 1
              p.lead
                | Check your downloads folder and double-click the&nbsp;
                img(src="src/images/zip-icon.png", alt=".zip icon")
                |  Light.zip file.
            .install-step
              h3 Step 2
              p.lead
                | Move the un-zipped contents of the&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  Light folder to the Arduino&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  libraries folder:
              h5 INSTALL PATH
              div(translate="no")
                script(type="syntaxhighlighter", class="brush: shell; gutter: false;")
                  :cdata
                    Windows:       My Documents\Arduino\libraries
                    Mac & Linux:   Documents/Arduino/libraries

                h5 FOLDER STRUCTURE
                .image
                  img(src="assets/images/install-folder-structure-documents.png", alt="Documents/Arduino/Libraries")
                .image
                  img(src="assets/images/install-folder-structure-light.png", alt="RBD_Light")
                .image
                  img(src="assets/images/install-folder-structure-timer.png", alt="RBD_Timer")
            .install-step
              h3 Step 3
              p.lead
                | Upgrade to&nbsp;
                a(href="https://www.arduino.cc/en/Main/Software") Arduino IDE v1.5 or greater
                |  and load the&nbsp;
                a.close-modal(href="#example-sketch")
                  | Example&nbsp;
                  span(translate="no") Sketch
                |  to get started.
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') Close

    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade
    script.
      $(document).ready(function(){
        (new GithubRepo({
          user: "alextaujenis",
          repo: "RBD_Light"
        })).render();
        $(".rbd_light").addClass("selected")
      });