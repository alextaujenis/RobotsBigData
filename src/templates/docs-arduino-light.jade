doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Light Docs
    meta(name="description", content="An Arduino library to control many LEDs by using commands like on, off, setBrightness, blink, and fade.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          ol.breadcrumb.stuck
            li
              a(href="index.html") Home
            li
              a(href="docs-arduino.html") Arduino
            li.active(translate="no")
              | Light
          .jumbotron
            .stuck.click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Light
                small(translate="yes") API DOCUMENTATION
              p
                | Control many lights.
                small v2.0.1
              a.btn.btn-success(href="#download") Download
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#example-sketch") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
          .h3
            #overview.anchor
            | Overview
          p.lead
            | Control many lights and blink without delay using commands such as&nbsp;
            a.click-flash(href="#on") on()
            | ,&nbsp;
            a.click-flash(href="#off") off()
            | ,&nbsp;
            a.click-flash(href="#blink") blink()
            | , and&nbsp;
            a.click-flash(href="#fade") fade()
            | . Lights must be connected to PWM enabled Arduino pins to work with this library.

          .h3
            #download.anchor
            | Download
          p
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself with one dependency.
          ul
            li
              a(href="https://github.com/alextaujenis/RBD_Light/raw/master/extras/RBD_Light.zip")
                | Download Light Library v2.0.1&nbsp;
                .label.label-warning.zip-label .zip
              |  by itself with the&nbsp;
              a.dark-link(href="https://github.com/alextaujenis/RBD_Timer/raw/master/extras/RBD_Timer.zip") Timer
              |  dependency, or
            li
              a(href="install.html") Download All Sensor Libraries
              |  with this library and dependency included, or
            li
              a(href="https://github.com/alextaujenis/RBD_Light") View Source on GitHub
              |  with&nbsp;
              a.dark-link(href="http://opensource.org/licenses/mit-license.php") MIT license

          .h3
            #example-sketch.anchor
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++
          div(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Timer.h>
                #include <RBD_Light.h>

                RBD::Light light(13);

                void setup() {
                  light.blink(250,250);
                }

                void loop() {
                  light.update();
                }

          .h3
            #public-methods.anchor
            | Public Methods

          p
            | You can use this library without calling&nbsp;
            a.click-flash(href="#update") update()
            |  and&nbsp;
            i most
            |  methods will function correctly. You must continuously call&nbsp;
            a.click-flash(href="#update") update()
            |  inside of loop() in order to use the
            span.label.label-success Real-Time
            |  methods tagged below.

          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Light

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor(pin)
            li.divider
            li
              a.click-flash(href="#on") .on()
            li
              a.click-flash(href="#off") .off()
            li
              a.click-flash(href="#setbrightness") .setBrightness(value)
            li
              a.click-flash(href="#setbrightnesspercent") .setBrightnessPercent(value)
            li.divider
            li
              a.click-flash(href="#ison") .isOn()
            li
              a.click-flash(href="#isoff") .isOff()
            li
              a.click-flash(href="#getbrightness") .getBrightness()
            li
              a.click-flash(href="#getbrightnesspercent") .getBrightnessPercent()
            li.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#blink") .blink(on_time, off_time, [times])
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#fade") .fade(up_time, on_time, down_time, off_time, [times])
              include ./global/labels/real-time.jade

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::Light constructor(pin)
            p Create a new light and pass in the Arduino pin number.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::Light light(13);

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #on.anchor
              .light light
              | .on()
            p Turn on the light.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.on();
                  }

          .section
            .method-name(translate="no")
              #off.anchor
              .light light
              | .off()
            p Turn off the light.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.off();
                  }

          .section
            .method-name(translate="no")
              #setbrightness.anchor
              .light light
              | .setBrightness(value)
            p Pass in an integer between 0 - 255 to set the raw brightness of the light.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.setBrightness(128); // about 50% brightness
                  }

          .section
            .method-name(translate="no")
              #setbrightnesspercent.anchor
              .light light
              | .setBrightnessPercent(value)
            p
              | Pass in an integer between 0 - 100 to set the percentage brightness of the light. This is the same as&nbsp;
              a.click-flash(href="#setbrightness") setBrightness()
              |  except with a smaller input domain.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.setBrightnessPercent(75); // 75% brightness
                  }

          .section
            .method-name(translate="no")
              #ison.anchor
              .light light
              | .isOn()
            p Returns true if the current light brightness is at 100%.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(light.isOn()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #isoff.anchor
              .light light
              | .isOff()
            p Returns true if the current light brightness is at 0%.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(light.isOff()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #getbrightness.anchor
              .light light
              | .getBrightness()
            p Returns an integer from 0 - 255 of the current light raw brightness.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.getBrightness();
                  }

          .section
            .method-name(translate="no")
              #getbrightnesspercent.anchor
              .light light
              | .getBrightnessPercent()
            p
              | Returns an integer from 0 - 100 of the current light percentage brightness. This is the same as&nbsp;
              a.click-flash(href="#getbrightness") getBrightness()
              |  except with a smaller input domain.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.getBrightnessPercent();
                  }

          .section
            .method-name(translate="no")
              #update.anchor
              .light light
              | .update()
              include ./global/labels/update.jade
            p
              | Keep calculating brightness values over time. This must be called continuously within loop() in order to&nbsp;
              a.click-flash(href="#blink") blink()
              |  or&nbsp;
              a.click-flash(href="#fade") fade()
              |  the light.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light.update();
                  }

          .section
            .method-name(translate="no")
              #blink.anchor
              .light light
              | .blink(on_time, off_time, [times])
              include ./global/labels/real-time.jade
            p
              | Pass in unsigned longs for the time values in milliseconds. Pass in an integer for the last parameter for the number of times the light should blink, which is [optional] and can be left out to make the light repeat the blink cycle forever.
            ul
              li the light will turn on for the on_time
              li then turn off for the off_time
              li and will repeat this cycle for the number of times you provided [optional]
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    light.blink(1000,500,25);
                  }

                  void loop() {
                    light.update();
                  }

          .section
            .method-name(translate="no")
              #fade.anchor
              .light light
              | .fade(up_time, on_time, down_time, off_time, [times])
              include ./global/labels/real-time.jade
            p
              | Pass in unsigned longs for the time values in milliseconds. Pass in an integer for the last parameter for the number of times the light should fade, which is [optional] and can be left out to make the light repeat the fade cycle forever.
            ul
              li the light will perform a linear fade up according to the up_time
              li stay on for the on_time
              li linear fade down for the down_time
              li then stay off for the off_time
              li and will repeat this cycle for the number of times your provided [optional]
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    light.fade(2500,250,2000,750,1000);
                  }

                  void loop() {
                    light.update();
                  }

    .navbar.navbar-default.navbar-footer
      .container-fluid
        .row
          .col-xs-6.text-right
            | &copy; 2015&nbsp;
            a(href="http://opensource.org/licenses/mit-license.php") MIT License
          .col-xs-6
            a(href="https://github.com/alextaujenis/RobotsBigData/edit/gh-pages/src/templates/docs-arduino-light.jade") Edit this page

    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade