doctype html
html(lang='en')
  head
    title Robots + Big Data: Light Documentation
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          ol.breadcrumb.stuck
            li
              a(href="index.html") Home
            li
              a(href="docs-arduino.html") Arduino
            li.active
              | Light
            a.pull-right.edit-page(href="https://github.com/alextaujenis/RobotsBigData/edit/gh-pages/src/templates/docs-arduino-light.jade", data-toggle="tooltip", data-placement="left", title="Edit this page on GitHub.") edit
          .jumbotron
            .stuck.click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2
                | Light
                small  API DOCUMENTATION
              p
                | Control many lights.
                small v1.0.3
              a.btn.btn-success(href="#download") Download
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#example-sketch") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
          h3
            #overview.anchor
            | Overview
          p.lead
            | Control many lights and blink without delay using commands such as&nbsp
            a.click-flash(href="#on") on()
            | ,&nbsp;
            a.click-flash(href="#off") off()
            | ,&nbsp;
            a.click-flash(href="#blink") blink()
            | , and&nbsp;
            a.click-flash(href="#fade") fade()
            | . Lights must be connected to PWM enabled Arduino pins to work with this library.

          h3
            #download.anchor
            | Download
          p
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself with one dependency.
          p
            ul
              li
                a(href="https://github.com/alextaujenis/RBD_Light/raw/master/extras/RBD_Light.zip")
                  | Download Light Library v1.0.3&nbsp;
                  label.label.label-warning.zip-label .zip
                |  by itself with the&nbsp;
                a.dark-link(href="https://github.com/alextaujenis/RBD_Timer/raw/master/extras/RBD_Timer.zip") Timer
                |  dependency, or
              li
                a(href="install.html") Download All Sensor Libraries
                |  with this library and dependency included, or
              li
                a(href="https://github.com/alextaujenis/RBD_Light") View Source on GitHub
                |  with&nbsp;
                a.dark-link(href="http://opensource.org/licenses/mit-license.php") MIT license

          h3
            #example-sketch.anchor
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++

          script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
            :cdata
              #include <RBD_Timer.h>
              #include <RBD_Light.h>

              RBD::Light light(13);

              void setup() {
                light.blink(250,250);
              }

              void loop() {
                light.update();
              }

          h3
            #public-methods.anchor
            | Public Methods

          p
            | You can use this library without calling&nbsp;
            a.click-flash(href="#update") update()
            |  and&nbsp;
            i most
            |  methods will function correctly. You must continuously call&nbsp;
            a.click-flash(href="#update") update()
            |  inside of loop() in order to use the
            span.label.label-success RT
            |  (Real-Time) methods tagged below.

          h4.class-name
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Light

          ul.public-methods
            li
              a.click-flash(href="#constructor") constructor(pin)
            hr.divider
            li
              a.click-flash(href="#on") .on()
            li
              a.click-flash(href="#off") .off()
            li
              a.click-flash(href="#setpwm") .setPwm(value)
            li
              a.click-flash(href="#setpwmpercent") .setPwmPercent(value)
            hr.divider
            li
              a.click-flash(href="#ison") .isOn()
            li
              a.click-flash(href="#isoff") .isOff()
            li
              a.click-flash(href="#getpwm") .getPwm()
            li
              a.click-flash(href="#getpwmpercent") .getPwmPercent()
            hr.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#blink") .blink(on_time, off_time, [times])
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#fade") .fade(up_time, on_time, down_time, off_time, [times])
              include ./global/labels/real-time.jade

          .section
            #constructor.anchor
            h4 RBD::Light constructor(pin)
            p Create a new light and pass in the Arduino pin number.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Light light(13);

                void setup() {
                  ...
                }

          .section
            #on.anchor
            h4
              .light light
              | .on()
            p Turn on the light.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  light.on();
                }

          .section
            #off.anchor
            h4
              .light light
              | .off()
            p Turn off the light.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  light.off();
                }

          .section
            #setpwm.anchor
            h4
              .light light
              | .setPwm(value)
            p Pass in an integer between 0 - 255 to set the brightness of the light.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  light.setPwm(200);
                }

          .section
            #setpwmpercent.anchor
            h4
              .light light
              | .setPwmPercent(value)
            p Pass in an integer between 0 - 100 to set the brightness of the light.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  light.setPwmPercent(75);
                }

          .section
            #ison.anchor
            h4
              .light light
              | .isOn()
            p Returns true if the current light brightness is at 100%.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  if(light.isOn()) {
                    ...
                  }
                }

          .section
            #isoff.anchor
            h4
              .light light
              | .isOff()
            p Returns true if the current light brightness is at 0%.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  if(light.isOff()) {
                    ...
                  }
                }

          .section
            #getpwm.anchor
            h4
              .light light
              | .getPwm()
            p Returns an integer of the current light brightness from 0 - 255.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  light.getPwm();
                }

          .section
            #getpwmpercent.anchor
            h4
              .light light
              | .getPwmPercent()
            p Returns an integer of the current light percentage brightness from 0 - 100.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  light.getPwmPercent();
                }

          .section
            #update.anchor
            h4
              .light light
              | .update()
              include ./global/labels/update.jade
            p
              | Keep the light moving in real-time. This must be called continuously within loop() in order to&nbsp;
              a.click-flash(href="#blink") blink()
              |  or&nbsp;
              a.click-flash(href="#fade") fade()
              |  the light.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  light.update();
                }

          .section
            #blink.anchor
            h4
              .light light
              | .blink(on_time, off_time, [times])
              include ./global/labels/real-time.jade
            p
              | Pass in unsigned longs for the time values in milliseconds. Pass in an integer for the last parameter for the number of times the light should blink, which is [optional] and can be left out to make the light repeat the blink cycle forever.
            ul
              li the light will turn on for the on_time
              li then turn off for the off_time
              li and will repeat this cycle for the number of times you provided [optional]
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  light.blink(1000,500,25);
                }

                void loop() {
                  light.update();
                }

          .section
            #fade.anchor
            h4
              .light light
              | .fade(up_time, on_time, down_time, off_time, [times])
              include ./global/labels/real-time.jade
            p
              | Pass in unsigned longs for the time values in milliseconds. Pass in an integer for the last parameter for the number of times the light should fade, which is [optional] and can be left out to make the light repeat the fade cycle forever.

            ul
              li the light will perform a linear fade up according to the up_time
              li stay on for the on_time
              li linear fade down for the down_time
              li then stay off for the off_time
              li and will repeat this cycle for the number of times your provided [optional]
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  light.fade(2500,250,2000,750,1000);
                }

                void loop() {
                  light.update();
                }

    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade
    include ./global/footer.jade