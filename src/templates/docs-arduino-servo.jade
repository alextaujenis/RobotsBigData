doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Servo Docs
    meta(name="description", content="An Arduino library to control many servos without delay or interrupts while using PWM/PPM for a rotation signal.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          ol.breadcrumb.stuck
            li
              a(href="index.html") Home
            li
              a(href="docs-arduino.html") Arduino
            li.active(translate="no")
              | Servo
          .jumbotron
            .stuck.click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Servo
                small(translate="yes") API DOCUMENTATION
              p
                | Control many servos without delay or interrupts.
                small v1.0.1
              a.btn.btn-success(href="#download") Download
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#example-wiring") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods

          .h3
            #overview.anchor
            | Overview
          p.lead
            | Control many servos without delay or interrupts while applying rotation adjustments with PWM/PPM. Quickly calibrate each servo in the&nbsp;
            a.click-flash(href="#constructor") constructor()
            | , then make real-time adjustments to the rotation with&nbsp;
            a.click-flash(href="#movetodegrees") moveToDegrees()
            | .
          p.lead
            | Connect as many servos as the number of digital pins available on your Arduino. This library is very fast and has a small, lightweight code footprint.

          .h3
            #download.anchor
            | Download
          p
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself.
          ul
            li
              a(href="https://github.com/alextaujenis/RBD_Servo/raw/master/extras/RBD_Servo.zip")
                | Download Servo Library v1.0.1&nbsp;
                .label.label-warning.zip-label .zip
              |  by itself, or
            li
              a(href="install.html") Download All Sensor Libraries
              |  with this library included, or
            li
              a(href="https://github.com/alextaujenis/RBD_Servo") View Source on GitHub
              |  with&nbsp;
              a.dark-link(href="http://opensource.org/licenses/mit-license.php") MIT license

          .h3
            #example-wiring.anchor
            | Example Wiring
          ol
            li
              | Connect the servo&nbsp;
              span.hot-wire red wire
              |  to the Arduino&nbsp;
              span.hot-wire +5v pin
              i  (or use external power)
            li
              | Connect the servo&nbsp;
              span.brown-wire brown
              |  or&nbsp;
              span.ground-wire black wire
              |  to the Arduino&nbsp;
              span.ground-wire ground pin
            li
              | Connect the servo&nbsp;
              span.orange-wire orange
              |  or&nbsp;
              span.yellow-wire yellow wire
              |  to the Arduino&nbsp;
              span.control-wire digital pin 2
            li
              | Load the&nbsp;
              a(href="#example-sketch") Example Sketch
              |  onto the Arduino
            li Watch the servo adjust to the desired position
          p
            img.img-responsive(src="assets/images/arduino-servo-wiring-diagram.png", alt="A servo wired to an Arduino Micro digital pin 2.")
          .h3
            #example-sketch.anchor
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++
          div(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Servo.h>

                RBD::Servo servo(2, 1000, 2000); // pin 2, 1ms - 2ms pulse

                void setup() {
                  servo.moveToDegrees(90)
                }

                void loop() {
                  servo.update();
                }
          .h3
            #public-methods.anchor
            | Public Methods
          p
            | You must continuously call&nbsp;
            a.click-flash(href="#update") update()
            |  inside of loop() in order to use the
            span.label.label-success Real-Time
            |  methods tagged below.

          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Servo

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor(pin, pulse_min, pulse_max)
            li.divider
            li
              a.click-flash(href="#setpulseinterval") .setPulseInterval(value)
            li
              a.click-flash(href="#setdegreesofrotation") .setDegreesOfRotation(value)
            li.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#movetodegrees") .moveToDegrees()
              include ./global/labels/real-time.jade

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::Servo constructor(pin, pulse_min, pulse_max)
            p
              | Pass in an integer for the digital Arduino pin that is connected to the servo movement control wire (orange or yellow).
            p
              | For the second and third parameters; pass in unsigned longs for the hardware specified microsecond pulse min and max times, which determine the time limits for calculating the length of the orientation pulse (typically between 1000-2000 microseconds, or 1-2 milliseconds).
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::Servo servo(2, 1000, 2000); // pin 2, 1ms - 2ms pulse

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #setpulseinterval.anchor
              .light servo
              | .setPulseInterval(value)
            p
              | Provide an unsigned long to set the amount of time between each orientation pulse. The default is 20ms and is set automatically in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    servo.setPulseInterval(20); // 20 ms default
                  }

          .section
            .method-name(translate="no")
              #setdegreesofrotation.anchor
              .light servo
              | .setDegreesOfRotation(value)
            p
              | Provide an integer to set the maximum number of degrees of rotation the servo can handle. The default is 180 degrees and is set automatically in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    servo.setDegreesOfRotation(180); // default
                  }

          .section
            .method-name(translate="no")
              #update.anchor
              .light servo
              | .update()
              include ./global/labels/update.jade
            p
              | Keep processing and applying servo movements to the motor. This must be called continuously within loop() in order to use&nbsp;
              a.click-flash(href="#movetodegrees") moveToDegrees()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    servo.update();
                  }

          .section
            .method-name(translate="no")
              #movetodegrees.anchor
              .light servo
              | .moveToDegrees(value)
              include ./global/labels/real-time.jade
            p
              | Provide an integer and the servo will move to the specified position in degrees. This can be called inside of setup() or also at run-time inside of loop().
            p
              | For performance reasons; you should only call this method&nbsp;
              b once
              |  for each change in adjustment requested inside of loop(). This can be done by wrapping this method in a conditional statement and controlling the program flow with the&nbsp;
              a(href="docs-arduino-timer.html") RBD Timer library
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    servo.moveToDegrees(90);
                  }

                  void loop() {
                    servo.update();
                  }

    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade