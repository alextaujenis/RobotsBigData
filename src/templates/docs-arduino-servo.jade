doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Servo Docs
    meta(name="description", content="An Arduino library to control many servos without delay or interrupts while using PWM/PPM for a rotation signal.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        .hidden-xs.col-sm-4.stuck
          include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          .breadcrumb-container.stuck
            ol.breadcrumb
              li
                a(href="index.html") Home
              li
                a(href="docs-arduino.html") Arduino
              li.active(translate="no")
                | Servo
            .breadcrumb-icons.pull-right
              .icon-container.pull-right
                a(href="https://github.com/alextaujenis/RBD_Servo")
                  .icon
                    .image
                      img(src='assets/images/github-logo.png', alt="GitHub Logo")
                    .text-container
                      .name View Source on GitHub
                      .subtitle with MIT License
              .icon-container.pull-right.download-button(data-toggle="tooltip", data-placement="bottom", title="Click here to see how to install this library")
                .icon
                  .image
                    img(src='assets/images/arduino-library-icon.png', alt=".ino icon")
                  .text-container
                    .name How To Install
                    .subtitle in the Arduino IDE
              .clearfix
            .clearfix
          .jumbotron
            .click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Servo
                small(translate="yes") API DOCUMENTATION
              p#RBD_Servo
                | Control many servos without delay or interrupts.
                small.version
              a.btn.btn-primary(href="#example-wiring") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
              | &nbsp;&nbsp;
              a.btn.btn-default(href="https://github.com/alextaujenis/RBD_Servo/releases") Release Notes

          .h3
            #overview.anchor
            | Overview
          p.lead
            | Control many servos at once without delay or interrupts while applying rotation adjustments with PWM/PPM. Quickly calibrate each servo in the&nbsp;
            a.click-flash(href="#constructor", translate="no") constructor()
            |  by setting the min and max pulse length (in microseconds), then make real-time adjustments to the rotation with&nbsp;
            a.click-flash(href="#movetodegrees", translate="no") moveToDegrees()
            | .
          p.lead
            | Connect as many servos as the number of digital pins available on your Arduino. This library is very fast and has a small, lightweight code footprint.

          .h3
            #example-wiring.anchor
            | Example Wiring
          ol
            li
              | Connect the servo&nbsp;
              span.hot-wire red wire
              |  to the Arduino&nbsp;
              span.hot-wire +5v pin
              i  (or use external power)
            li
              | Connect the servo&nbsp;
              span.brown-wire brown
              |  or&nbsp;
              span.ground-wire black wire
              |  to the Arduino&nbsp;
              span.ground-wire ground pin
            li
              | Connect the servo&nbsp;
              span.orange-wire orange
              |  or&nbsp;
              span.yellow-wire yellow wire
              |  to the Arduino&nbsp;
              span.control-wire digital pin 2
            li
              | Load the&nbsp;
              a(href="#example-sketch")
                | Example&nbsp;
                span(translate="no") Sketch
              |  onto the Arduino
            li Watch the servo adjust to the desired position
          p
            img.img-responsive(src="assets/images/arduino-servo-wiring-diagram.png", alt="A servo wired to an Arduino Micro digital pin 2.")
          .h3
            #example-sketch.anchor
            | Example&nbsp;
            span(translate="no") Sketch
            span.label.label-info Arduino
            span.label.label-primary C++
          div(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Servo.h>

                RBD::Servo servo(2, 1000, 2000); // pin 2, 1ms - 2ms pulse

                void setup() {
                  servo.moveToDegrees(90);
                }

                void loop() {
                  servo.update();
                }
          .h3
            #public-methods.anchor
            | Public Methods
          p
            | You must continuously call&nbsp;
            a.click-flash(href="#update", translate="no") update()
            |  inside of loop() in order to use the
            span.label.label-success Real-Time
            |  methods tagged below.

          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Servo

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor(pin, pulse_min, pulse_max)
            li.divider
            li
              a.click-flash(href="#setpulseinterval") .setPulseInterval(value)
            li
              a.click-flash(href="#setdegreesofrotation") .setDegreesOfRotation(value)
            li.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#movetodegrees") .moveToDegrees()
              include ./global/labels/real-time.jade

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::Servo constructor(pin, pulse_min, pulse_max)
            p
              | Pass in an integer for the digital Arduino pin that is connected to the servo movement control wire (orange or yellow).
            p
              | For the second and third parameters; pass in unsigned longs for the hardware specified microsecond pulse min and max times, which determine the time limits for calculating the length of the orientation pulse (typically between 1000-2000 microseconds, or 1-2 milliseconds).
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::Servo servo(2, 1000, 2000); // pin 2, 1ms - 2ms pulse

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #setpulseinterval.anchor
              .light servo
              | .setPulseInterval(value)
            p
              | Provide an unsigned long to set the amount of time between each orientation pulse. The default is 20ms and is set automatically in the&nbsp;
              a.click-flash(href="#constructor", translate="no") constructor()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    servo.setPulseInterval(20); // 20 ms default
                  }

          .section
            .method-name(translate="no")
              #setdegreesofrotation.anchor
              .light servo
              | .setDegreesOfRotation(value)
            p
              | Provide an integer to set the maximum number of degrees of rotation the servo can handle. The default is 180 degrees and is set automatically in the&nbsp;
              a.click-flash(href="#constructor", translate="no") constructor()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    servo.setDegreesOfRotation(180); // default
                  }

          .section
            .method-name(translate="no")
              #update.anchor
              .light servo
              | .update()
              include ./global/labels/update.jade
            p
              | Keep processing and applying servo movements to the motor. This must be called continuously within loop() in order to use&nbsp;
              a.click-flash(href="#movetodegrees", translate="no") moveToDegrees()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    servo.update();
                  }

          .section
            .method-name(translate="no")
              #movetodegrees.anchor
              .light servo
              | .moveToDegrees(value)
              include ./global/labels/real-time.jade
            p
              | Provide an integer and the servo will move to the specified position in degrees. This can be called inside of setup() or also at run-time inside of loop().
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    servo.moveToDegrees(90);
                  }

                  void loop() {
                    servo.update();
                  }

          .bottom-nav.hidden.visible-xs-block
            include ./global/docs-side-nav.jade

    #modal.modal.fade(tabindex='-1', role='dialog')
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') x
            h4#modalLabel.modal-title Library Installation
          .modal-body
            .install-step
              h3 Step 1
              p.lead
                | Download and install the latest version of the&nbsp;
                a(href="https://www.arduino.cc/en/main/software#download", target="_blank")
                  img(src="assets/images/arduino-library-icon.png", alt="Arduino IDE Logo")
                  |  Arduino IDE
                | .
            .install-step
              h3 Step 2
              p.lead
                | Open the Arduino IDE and click&nbsp;
                b Tools &rArr; Manage Libraries...
                .image
                  img.img-responsive(src="assets/images/arduino-ide-tools-manage-libraries.png", alt="Arduino Library Manager Menu: Tools -> Manage Libraries...")
            .install-step
              h3 Step 3
              p.lead
                | Search for&nbsp;
                b(translate="no") RBD_Servo
                |  in the Arduino Library Manager and click&nbsp;
                b Install
                | , then click Close.
                .image
                  img.img-responsive(src="assets/images/library-manager-rbd-servo.png", alt="Arduino Library Manager: Searching for RBD_Servo")
            .install-step
              h3 Next Step
              p.lead
                | Click on&nbsp;
                b File &rArr; Examples &rArr;&nbsp;
                b
                  span(translate="no") RBD_Servo
                b  &rArr;
                  i  example_name
                |  in the Arduino IDE to see code examples for this library, or create a new&nbsp;
                span(translate="no") sketch
                |  in the Arduino IDE and copy the&nbsp;
                a.close-modal(href="#example-sketch")
                  | Example&nbsp;
                  span(translate="no") Sketch
                |  to get started.
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') Close

    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade
    script.
      $(document).ready(function(){
        (new GithubRepo({
          user: "alextaujenis",
          repo: "RBD_Servo"
        })).render();
        $(".rbd_servo").addClass("selected")
      });
