doctype html
html(lang='en')
  head
    title Robots + Big Data: Human Sensor Documentation
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          ol.breadcrumb.stuck
            li
              a(href="index.html") Home
            li
              a(href="docs-arduino.html") Arduino
            li.active
              | Human Sensor
            a.pull-right.edit-page(href="https://github.com/alextaujenis/RobotsBigData/edit/gh-pages/src/templates/docs-arduino-human-sensor.jade", data-toggle="tooltip", data-placement="left", title="Edit this page on GitHub.") edit
          .jumbotron
            .stuck.click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2
                | Human Sensor
                small  API DOCUMENTATION
              p
                | Detect human presence, touch, and pickup events.
                small v1.0.2
              a.btn.btn-success(href="#download") Download
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#example-setup") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
          h3
            a(name="overview")
            | Overview
          p.lead
            | Detect and interact with humans through change in capacitance. You can calibrate this library for your sensor very quickly to detect&nbsp;
            a.click-flash(href="#onnear") onNear()
            | ,&nbsp;
            a.click-flash(href="#ontouch") onTouch()
            | , and&nbsp;
            a.click-flash(href="#onpickup") onPickup()
            |  events. The example below uses a piece of aluminum foil, but you can attach the wire to anything conductive and calibrate the sensor accordingly.
          p.lead
            |This library measures relative capacitance so it is prone to interference. You can temporarily adjust the entire scale and then reset it when the capacitance disruption has stopped by using&nbsp;
            a.click-flash(href="#setmodifier") setModifier()
            |  and&nbsp;
            a.click-flash(href="#resetmodifier") resetModifier()
            | . Look at the&nbsp;
            a(href="docs-arduino-capacitance.html") Capacitance Library
            |  if you would like to know more about how capacitance is calculated.
          h3
            a(name="download")
            | Download
          p
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself with two dependencies.
          p
            ul
              li
                a(href="https://github.com/alextaujenis/RBD_HumanSensor/raw/master/extras/RBD_HumanSensor.zip")
                  | Download Human Sensor Library v1.0.2&nbsp;
                  label.label.label-warning.zip-label .zip
                |  by itself with the&nbsp;
                a.dark-link(href="https://github.com/alextaujenis/RBD_Capacitance/raw/master/extras/RBD_Capacitance.zip") Capacitance
                |  and&nbsp;
                a.dark-link(href="https://github.com/alextaujenis/RBD_Threshold/raw/master/extras/RBD_Threshold.zip") Threshold
                |  dependencies, or
              li
                a(href="install.html") Download All Sensor Libraries
                |  with this library and dependencies included, or
              li
                a(href="https://github.com/alextaujenis/RBD_HumanSensor") View Source on GitHub
                |  with&nbsp;
                a.dark-link(href="http://opensource.org/licenses/mit-license.php") MIT license

          h3
            a(name="example-setup")
            | Example Setup
          p
            ol
              li Bridge a 10Meg Ohm resistor across the send (tx 1) and receive (rx 0) pins
              li Run a length of wire from the receive (rx 0) pin to a strip of aluminum foil
              li Attach the foil to an object by covering it with a non-conductive material (tape)
              li Load up the example sketch and open a serial connection at 115200 baud
              li Move your hand by the object, touch it, pick it up, and change the raw threshold values in the sketch
              li Compile and reload the calibrated sketch back into the Arduino
              li Your human sensor is calibrated and ready to use
          h3
            a(name="example-sketch")
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++


          script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
            :cdata
              #include <RBD_Capacitance.h>
              #include <RBD_Threshold.h>
              #include <RBD_HumanSensor.h>

              RBD::HumanSensor human_sensor(1, 0); // send, receive

              void setup() {
                Serial.begin(115200);
                human_sensor.setNearValue(100);
                human_sensor.setTouchValue(200);
                human_sensor.setPickupValue(300);
              }

              void loop() {
                human_sensor.update();

                if(human_sensor.onGone()) {
                  Serial.print("0. GONE   ");
                }
                else if(human_sensor.onNear()) {
                  Serial.print("1. NEAR   ");
                }
                else if(human_sensor.onTouch()) {
                  Serial.print("2. TOUCH  ");
                }
                else if(human_sensor.onPickup()) {
                  Serial.print("3. PICKUP ");
                }

                if(human_sensor.onRawValueChange()) {
                  Serial.println(human_sensor.getRawValue());
                }
              }
          h3
            a(name="public-methods")
            | Public Methods

          p
            | You must continuously call&nbsp;
            a.click-flash(href="#update") update()
            |  inside of loop() in order to use the
            span.label.label-success RT
            |  (Real-Time) methods tagged below.

          h4.class-name
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::HumanSensor

          ul.public-methods
            li
              a.click-flash(href="#constructor") constructor(send_pin, receive_pin)
            hr.divider
            li
              a.click-flash(href="#setsamplesize") .setSampleSize(value)
            li
              a.click-flash(href="#setnearvalue") .setNearValue(value)
            li
              a.click-flash(href="#settouchvalue") .setTouchValue(value)
            li
              a.click-flash(href="#setpickupvalue") .setPickupValue(value)
            li
              a.click-flash(href="#setmodifier") .setModifier(value)
            li
              a.click-flash(href="#resetmodifier") .resetModifier()
            hr.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#isgone") .isGone()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#isnear") .isNear()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#istouch") .isTouch()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#ispickup") .isPickup()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#getvalue") .getValue()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#getrawvalue") .getRawValue()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#getactivelevel") .getActiveLevel()
              include ./global/labels/real-time.jade
            hr.divider
            li
              a.click-flash(href="#ongone") .onGone()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onnear") .onNear()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#ontouch") .onTouch()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onpickup") .onPickup()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onvaluechange") .onValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onrawvaluechange") .onRawValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onactivelevelchange") .onActiveLevelChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade

          .section
            a(name="constructor")
            h4 RBD::HumanSensor constructor(send_pin, receive_pin)
            p Pass in integers for the send and receive pins to create a new instance of this class.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::HumanSensor human_sensor(1,0);

                void setup() {
                  ...
                }

          .section
            a(name="setsamplesize")
            h4
              .light human_sensor
              | .setSampleSize(value)
            p
              | Pass in an integer to change the number of readings taken to calculate the moving average&nbsp;
              a.click-flash(href="#getrawvalue") getRawValue()
              | . This can be called inside of setup() or also safely at runtime inside of loop().
            ul
              li
                b Decrease Variation
                |  in readings by making this number larger: 1000
              li
                b Increase Variation
                |  in readings by making this number smaller: 10
              li
                b Default Value
                | : 250
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  human_sensor.setSampleSize(1000);
                }

          .section
            a(name="setnearvalue")
            h4
              .light human_sensor
              | .setNearValue(value)
            p
              | Provide an integer from&nbsp;
              a.click-flash(href="#getrawvalue") getRawValue()
              |  to calibrate the lowest threshold for when a person is near the sensor.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  human_sensor.setNearValue(100);
                }

          .section
            a(name="settouchvalue")
            h4
              .light human_sensor
              | .setTouchValue(value)
            p
              | Provide an integer from&nbsp;
              a.click-flash(href="#getrawvalue") getRawValue()
              |  to calibrate the lowest threshold for when a person is touching the sensor.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  human_sensor.setTouchValue(150);
                }

          .section
            a(name="setpickupvalue")
            h4
              .light human_sensor
              | .setPickupValue(value)
            p
              | Provide an integer from&nbsp;
              a.click-flash(href="#getrawvalue") getRawValue()
              |  to calibrate the lowest threshold for when a person is picking up the sensor.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  human_sensor.setPickupValue(200);
                }

          .section
            a(name="setmodifier")
            h4
              .light human_sensor
              | .setModifier(value)
            p
              | Provide a positive or negative integer to temporarily adjust the human sensor threshold scale. The default value is 0.
            p
              i For example
              | ; if you have calibrated the scale and turn on a motor near the sensor: all readings will need to be adjusted for the increased capacitance from the motor.
              ul
                li
                  | If a running motor increases the difference in human sensor readings by a&nbsp;
                  a.click-flash(href="#getrawvalue") getRawValue()
                  |  of +200
                li
                  | Call&nbsp;
                  a.click-flash(href="#setmodifier") setModifier(-200)
                  |  on the human sensor when the motor turns on
                li
                  | All of the calibrated human sensor thresholds will adjust -200
                li
                  | The human sensor readings will account for motor interference
                li
                  | Call&nbsp;
                  a.click-flash(href="#resetmodifier") resetModifier()
                  |  on the human sensor when the motor shuts off
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(...) { // motor is on
                    human_sensor.setModifier(-200);
                  }
                  else {
                    human_sensor.resetModifier();
                  }

                  // when the motor is on; require +200 more from
                  // the raw sensor reading to trigger all events
                  if(human_sensor.isNear()) {
                    ...
                  }
                  else if(...) {
                    ...
                  }
                }

          .section
            a(name="resetmodifier")
            h4
              .light human_sensor
              | .resetModifier()
            p
              | Changes the&nbsp;
              a.click-flash(href="#setmodifier") setModifier()
              |  back to 0 and resets calibration of the human sensor threshold scale.
            p
              i For example
              | ; if you have calibrated the scale and turn on a motor near the sensor: all readings will need to be adjusted for the increased capacitance from the motor.
              ul
                li
                  | If a running motor increases the difference in human sensor readings by a&nbsp;
                  a.click-flash(href="#getrawvalue") getRawValue()
                  |  of +200
                li
                  | Call&nbsp;
                  a.click-flash(href="#setmodifier") setModifier(-200)
                  |  on the human sensor when the motor turns on
                li
                  | All of the calibrated human sensor thresholds will adjust -200
                li
                  | The human sensor readings will account for motor interference
                li
                  | Call&nbsp;
                  a.click-flash(href="#resetmodifier") resetModifier()
                  |  on the human sensor when the motor shuts off
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(...) {
                    human_sensor.setModifier(-200);
                  }
                  else {  // motor is off
                    human_sensor.resetModifier();
                  }

                  // when the motor is off; reset the
                  // threshold values for all events
                  if(human_sensor.isNear()) {
                    ...
                  }
                  else if(...) {
                    ...
                  }
                }

          .section
            a(name="update")
            h4
              .light human_sensor
              | .update()
              include ./global/labels/update.jade
            p Keep processing the readings and move this library along in real-time.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();
                }

          .section
            a(name="isgone")
            h4
              .light human_sensor
              | .isGone()
              include ./global/labels/real-time.jade
            p
              | Returns true if no human is present and the sensor is reading a value below the&nbsp;
              a.click-flash(href="#setnearvalue") setNearValue()
              | . This will always return true if no thresholds (near, touch, pickup) are set.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.isGone()) {
                    ...
                  }
                }

          .section
            a(name="isnear")
            h4
              .light human_sensor
              | .isNear()
              include ./global/labels/real-time.jade
            p
              | Returns true if a human is present and the sensor is reading a value at or above the&nbsp;
              a.click-flash(href="#setnearvalue") setNearValue()
              | .
            p
              | Returns false if the sensor is reading a value below the&nbsp;
              a.click-flash(href="#setnearvalue") setNearValue()
              | , or if a&nbsp;
              a.click-flash(href="#settouchvalue") setTouchValue()
              |  has been assigned and the sensor is reading a value at or above the&nbsp;
              a.click-flash(href="#istouch") isTouch()
              |  value.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.isNear()) {
                    ...
                  }
                }

          .section
            a(name="istouch")
            h4
              .light human_sensor
              | .isTouch()
              include ./global/labels/real-time.jade
            p
              | Returns true if a human is touching the sensor and it is reading a value at or above the&nbsp;
              a.click-flash(href="#settouchvalue") setTouchValue()
              | .
            p
              | Returns false if the sensor is reading a value below the&nbsp;
              a.click-flash(href="#settouchvalue") setTouchValue()
              | , or if a&nbsp;
              a.click-flash(href="#setpickupvalue") setPickupValue()
              |  has been assigned and the sensor is reading a value at or above the&nbsp;
              a.click-flash(href="#ispickup") isPickup()
              |  value.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.isTouch()) {
                    ...
                  }
                }

          .section
            a(name="ispickup")
            h4
              .light human_sensor
              | .isPickup()
              include ./global/labels/real-time.jade
            p
              | Returns true if a human is picking up the sensor and it is reading a value at or above the&nbsp;
              a.click-flash(href="#setpickupvalue") setPickupValue()
              | .
            p
              | Returns false if the sensor is reading a value below the&nbsp;
              a.click-flash(href="#setpickupvalue") setPickupValue()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.isPickup()) {
                    ...
                  }
                }

          .section
            a(name="getvalue")
            h4
              .light human_sensor
              | .getValue()
              include ./global/labels/real-time.jade
            p
              | Returns the capacitance sensor reading after being adjusted with the value given to&nbsp;
              a.click-flash(href="#setmodifier") setModifier()
              | .
            p
              | This will return the raw capacitance sensor reading if you have not used&nbsp;
              a.click-flash(href="#setmodifier") setModifier()
              |  yet, or if you have called&nbsp;
              a.click-flash(href="#resetmodifier") resetModifier()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.onValueChange()) {
                    Serial.println(human_sensor.getValue());
                  }
                }

          .section
            a(name="getrawvalue")
            h4
              .light human_sensor
              | .getRawValue()
              include ./global/labels/real-time.jade
            p
              | Returns the raw capacitance sensor reading and ignores any value that has been passed to&nbsp;
              a.click-flash(href="#setmodifier") setModifier()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  Serial.println(human_sensor.getRawValue());
                }

          .section
            a(name="getactivelevel")
            h4
              .light human_sensor
              | .getActiveLevel()
              include ./global/labels/real-time.jade
            p
              | Returns the current sensor level after being adjusted by&nbsp;
              a.click-flash(href="#setmodifier") setModifier()
              | .
              ul
                li
                  | &nbsp;
                  b 0
                  | &nbsp;&nbsp;no human is present
                li
                  | &nbsp;
                  b 1
                  | &nbsp;&nbsp;a human is near
                li
                  | &nbsp;
                  b 2
                  | &nbsp;&nbsp;a human is touching the sensor
                li
                  | &nbsp;
                  b 3
                  | &nbsp;&nbsp;a human is picking up the sensor
                li
                  b -1
                  | &nbsp;&nbsp;an error occured (non-continuous range)
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  Serial.println(human_sensor.getActiveLevel());
                }

          .section
            a(name="ongone")
            h4
              .light human_sensor
              | .onGone()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor registers a value below the&nbsp;
              a.click-flash(href="#setnearvalue") setNearValue()
              | . The active level must change away from and then come back to&nbsp;
              a.click-flash(href="#isgone") isGone()
              |  in order for this method to return true again.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.onGone()) {
                    // code only runs once per event
                    Serial.println("Gone");
                  }
                }
          .section
            a(name="onnear")
            h4
              .light human_sensor
              | .onNear()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor registers a value at or above the&nbsp;
              a.click-flash(href="#setnearvalue") setNearValue()
              |  and below the&nbsp;
              a.click-flash(href="#settouchvalue") setTouchValue()
              | . The active level must change away from and then come back to&nbsp;
              a.click-flash(href="#isnear") isNear()
              |  in order for this method to return true again.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.onNear()) {
                    // code only runs once per event
                    Serial.println("Near");
                  }
                }

          .section
            a(name="ontouch")
            h4
              .light human_sensor
              | .onTouch()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor registers a value at or above the&nbsp;
              a.click-flash(href="#settouchvalue") setTouchValue()
              |  and below the&nbsp;
              a.click-flash(href="#setpickupvalue") setPickupValue()
              | . The active level must change away from and then come back to&nbsp;
              a.click-flash(href="#isnear") isTouch()
              |  in order for this method to return true again.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.onTouch()) {
                    // code only runs once per event
                    Serial.println("Touch");
                  }
                }

          .section
            a(name="onpickup")
            h4
              .light human_sensor
              | .onPickup()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor registers a value at or above the&nbsp;
              a.click-flash(href="#setpickupvalue") setPickupValue()
              | . The active level must change away from and then come back to&nbsp;
              a.click-flash(href="#ispickup") isPickup()
              |  in order for this method to return true again.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.onPickup()) {
                    // code only runs once per event
                    Serial.println("Pickup");
                  }
                }

          .section
            a(name="onvaluechange")
            h4
              .light human_sensor
              | .onValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the&nbsp;
              a.click-flash(href="#getvalue") getValue()
              |  changes.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.onValueChange()) {
                    // code only runs once per event
                    Serial.println(human_sensor.getValue());
                  }
                }

          .section
            a(name="onrawvaluechange")
            h4
              .light human_sensor
              | .onRawValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the&nbsp;
              a.click-flash(href="#getrawvalue") getRawValue()
              |  changes.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.onRawValueChange()) {
                    // code only runs once per event
                    Serial.println(human_sensor.getRawValue());
                  }
                }

          .section
            a(name="onactivelevelchange")
            h4
              .light human_sensor
              | .onActiveLevelChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the&nbsp;
              a.click-flash(href="#getactivelevel") getActiveLevel()
              |  changes.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  human_sensor.update();

                  if(human_sensor.onActiveLevelChange()) {
                    // code only runs once per event
                    Serial.println(human_sensor.getActiveLevel());
                  }
                }

    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade
    include ./global/footer.jade