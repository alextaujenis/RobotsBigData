doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Human Sensor Docs
    meta(name="description", content="An Arduino library to detect human presence, touch, and pickup events by measuring change in capacitance.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        .hidden-xs.col-sm-4.stuck
          include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          .breadcrumb-container.stuck
            ol.breadcrumb
              li
                a(href="index.html") Home
              li
                a(href="docs-arduino.html") Arduino
              li.active(translate="no")
                | Human Sensor
            .breadcrumb-icons.pull-right
              .icon-container.pull-right
                a(href="https://github.com/alextaujenis/RBD_HumanSensor")
                  .icon
                    .image
                      img(src='assets/images/github-logo.png', alt="GitHub Logo")
                    .text-container
                      .name View Source on GitHub
                      .subtitle With MIT License
              .icon-container.pull-right.download-button(data-toggle="tooltip", data-placement="bottom", title="Click to download the Human Sensor library with the Capacitance and Threshold dependencies")
                a.ga-events(href="assets/downloads/HumanSensor.zip", data-name="HumanSensor.zip")
                  .icon
                    .image
                      img(src='assets/images/zip-icon.png', alt=".zip icon")
                    .text-container
                      .name HumanSensor.zip
                      .subtitle 12KB Download
              .clearfix
            .clearfix
          .jumbotron
            .click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Human Sensor
                small(translate="yes") API DOCUMENTATION
              p#RBD_HumanSensor
                | Detect human presence, touch, and pickup events.
                small.version
              a.btn.btn-primary(href="#example-wiring") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
              | &nbsp;&nbsp;
              a.btn.btn-default(href="https://github.com/alextaujenis/RBD_HumanSensor/releases") Release Notes

          .h3
            #overview.anchor
            | Overview
          p.lead
            | Detect and interact with humans through change in capacitance. You can calibrate this library for your sensor very quickly to detect&nbsp;
            a.click-flash(href="#onnear", translate="no") onNear()
            | ,&nbsp;
            a.click-flash(href="#ontouch", translate="no") onTouch()
            | , and&nbsp;
            a.click-flash(href="#onpickup", translate="no") onPickup()
            |  events. The example below uses a piece of aluminum foil, but you can attach the wire to anything conductive and calibrate the sensor accordingly.
          p.lead
            |This library measures relative capacitance so it is prone to interference. You can temporarily adjust the entire scale and then reset it when the capacitance disruption has stopped by using&nbsp;
            a.click-flash(href="#setmodifier", translate="no") setModifier()
            |  and&nbsp;
            a.click-flash(href="#resetmodifier", translate="no") resetModifier()
            | . Look at the&nbsp;
            a(href="docs-arduino-capacitance.html") Capacitance Library
            |  if you would like to know more about how capacitance is calculated.

          .h3
            #example-wiring.anchor
            | Example Wiring
          ol
            li
              | Connect Arduino&nbsp;
              span.blue-wire digital pin 2
              |  to a&nbsp;
              b 10Meg&#8486; resistor
            li
              | Connect the other end of the&nbsp;
              b 10Meg&#8486; resistor
              |  to Arduino&nbsp;
              span.control-wire digital pin 3
            li
              | Connect Arduino&nbsp;
              span.control-wire digital pin 3
              |  to a piece of conductive material (aluminum foil)
            li
              | Cover the conductive material with non-conductive material (tape)
            li
              | Load the&nbsp;
              a(href="#example-sketch")
                | Example&nbsp;
                span(translate="no") Sketch
              |  onto the Arduino
            li Open a serial connection at 115200 baud to see the reported values
            li
              a(href="#example-sketch-calibration") Calibrate
              |  the human sensor
          p
            img.img-responsive(src="assets/images/arduino-capacitance-wiring-diagram.png", alt="A piece of aluminum foil connected to a 10 Meg Ohm resistor that is bridged across Arduino digital pins 2 and 3.")

          .h3
            #example-sketch.anchor
            | Example&nbsp;
            span(translate="no") Sketch
            span.label.label-info Arduino
            span.label.label-primary C++
          div(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Capacitance.h>
                #include <RBD_Threshold.h>
                #include <RBD_HumanSensor.h>

                RBD::HumanSensor human_sensor(2, 3); // send, receive pin

                void setup() {
                  Serial.begin(115200);
                  human_sensor.setNearValue(100);
                  human_sensor.setTouchValue(200);
                  human_sensor.setPickupValue(300);
                }

                void loop() {
                  human_sensor.update();

                  if(human_sensor.onGone()) {
                    Serial.print("0. GONE   ");
                  }
                  else if(human_sensor.onNear()) {
                    Serial.print("1. NEAR   ");
                  }
                  else if(human_sensor.onTouch()) {
                    Serial.print("2. TOUCH  ");
                  }
                  else if(human_sensor.onPickup()) {
                    Serial.print("3. PICKUP ");
                  }

                  if(human_sensor.onRawValueChange()) {
                    Serial.println(human_sensor.getRawValue());
                  }
                }

          .h3
            #example-sketch-calibration.anchor
            | Example&nbsp;
            span(translate="no") Sketch
            |  Calibration
          p
            | Follow these steps to calibrate each human sensor before use:
          ol
            li
              a(href="#example-wiring") Set up the human sensor
              |  then open a serial connection to the Arduino
            li Move your hand just near the sensor to see the Raw Value change
            li
              | Change the&nbsp;
              a.click-flash(href="#setnearvalue", translate="no") setNearValue()
              |  to the Raw Value&nbsp;
              i
                | - in the&nbsp;
                a(href="#example-sketch")
                  | example&nbsp;
                  span(translate="no") sketch
                |  setup()
            li Touch the sensor to see the Raw Value change
            li
              | Change the&nbsp;
              a.click-flash(href="#settouchvalue", translate="no") setTouchValue()
              |  to the new Raw Value
            li Pick up the sensor to see the Raw Value change (if it is attached to an object)
            li
              | Change the&nbsp;
              a.click-flash(href="#setpickupvalue", translate="no") setPickupValue()
              |  to the new Raw Value
            li
              | Load the calibrated&nbsp;
              span(translate="no") sketch
              |  back into the Arduino
            li The human sensor is calibrated and ready to use

          .h3
            #public-methods.anchor
            | Public Methods
          p
            | You must continuously call&nbsp;
            a.click-flash(href="#update", translate="no") update()
            |  inside of loop() in order to use the
            span.label.label-success Real-Time
            |  methods tagged below.
          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::HumanSensor

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor(send_pin, receive_pin)
            li.divider
            li
              a.click-flash(href="#setsamplesize") .setSampleSize(value)
            li
              a.click-flash(href="#setnearvalue") .setNearValue(value)
            li
              a.click-flash(href="#settouchvalue") .setTouchValue(value)
            li
              a.click-flash(href="#setpickupvalue") .setPickupValue(value)
            li.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#isgone") .isGone()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#isnear") .isNear()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#istouch") .isTouch()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#ispickup") .isPickup()
              include ./global/labels/real-time.jade
            li.divider
            li
              a.click-flash(href="#ongone") .onGone()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onnear") .onNear()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#ontouch") .onTouch()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onpickup") .onPickup()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li.divider
            li
              a.click-flash(href="#getvalue") .getValue()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#getrawvalue") .getRawValue()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#getactivelevel") .getActiveLevel()
              include ./global/labels/real-time.jade
            li.divider
            li
              a.click-flash(href="#onvaluechange") .onValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onrawvaluechange") .onRawValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onactivelevelchange") .onActiveLevelChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li.divider
            li
              a.click-flash(href="#setmodifier") .setModifier(value)
            li
              a.click-flash(href="#resetmodifier") .resetModifier()

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::HumanSensor constructor(send_pin, receive_pin)
            p Pass in integers for the send and receive pins to create a new instance of this class.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::HumanSensor human_sensor(2, 3);

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #setsamplesize.anchor
              .light human_sensor
              | .setSampleSize(value)
            p
              | Pass in an integer to change the number of readings taken to calculate the moving average&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              | . This can be called inside of setup() or also safely at runtime inside of loop().
            ul
              li
                b Decrease Variation
                |  in readings by making this number larger: 1000
              li
                b Increase Variation
                |  in readings by making this number smaller: 10
              li
                b Default Value
                | : 250
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    human_sensor.setSampleSize(1000);
                  }

          .section
            .method-name(translate="no")
              #setnearvalue.anchor
              .light human_sensor
              | .setNearValue(value)
            p
              | Provide an integer from&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              |  to calibrate the lowest threshold for when a person is near the sensor.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    human_sensor.setNearValue(100);
                  }

          .section
            .method-name(translate="no")
              #settouchvalue.anchor
              .light human_sensor
              | .setTouchValue(value)
            p
              | Provide an integer from&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              |  to calibrate the lowest threshold for when a person is touching the sensor.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    human_sensor.setTouchValue(150);
                  }

          .section
            .method-name(translate="no")
              #setpickupvalue.anchor
              .light human_sensor
              | .setPickupValue(value)
            p
              | Provide an integer from&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              |  to calibrate the lowest threshold for when a person is picking up the sensor.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    human_sensor.setPickupValue(200);
                  }

          .section
            .method-name(translate="no")
              #update.anchor
              .light human_sensor
              | .update()
              include ./global/labels/update.jade
            p Keep processing the readings and move this library along in real-time.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();
                  }

          .section
            .method-name(translate="no")
              #isgone.anchor
              .light human_sensor
              | .isGone()
              include ./global/labels/real-time.jade
            p
              | Returns true if no human is present and the sensor is reading a value below the&nbsp;
              a.click-flash(href="#setnearvalue", translate="no") setNearValue()
              | . This will always return true if no thresholds (near, touch, pickup) are set.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.isGone()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #isnear.anchor
              .light human_sensor
              | .isNear()
              include ./global/labels/real-time.jade
            p
              | Returns true if a human is present and the sensor is reading a value at or above the&nbsp;
              a.click-flash(href="#setnearvalue", translate="no") setNearValue()
              | .
            p
              | Returns false if the sensor is reading a value below the&nbsp;
              a.click-flash(href="#setnearvalue", translate="no") setNearValue()
              | , or if a&nbsp;
              a.click-flash(href="#settouchvalue", translate="no") setTouchValue()
              |  has been assigned and the sensor is reading a value at or above the&nbsp;
              a.click-flash(href="#istouch", translate="no") isTouch()
              |  value.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.isNear()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #istouch.anchor
              .light human_sensor
              | .isTouch()
              include ./global/labels/real-time.jade
            p
              | Returns true if a human is touching the sensor and it is reading a value at or above the&nbsp;
              a.click-flash(href="#settouchvalue", translate="no") setTouchValue()
              | .
            p
              | Returns false if the sensor is reading a value below the&nbsp;
              a.click-flash(href="#settouchvalue", translate="no") setTouchValue()
              | , or if a&nbsp;
              a.click-flash(href="#setpickupvalue", translate="no") setPickupValue()
              |  has been assigned and the sensor is reading a value at or above the&nbsp;
              a.click-flash(href="#ispickup", translate="no") isPickup()
              |  value.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.isTouch()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #ispickup.anchor
              .light human_sensor
              | .isPickup()
              include ./global/labels/real-time.jade
            p
              | Returns true if a human is picking up the sensor and it is reading a value at or above the&nbsp;
              a.click-flash(href="#setpickupvalue", translate="no") setPickupValue()
              | .
            p
              | Returns false if the sensor is reading a value below the&nbsp;
              a.click-flash(href="#setpickupvalue", translate="no") setPickupValue()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.isPickup()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #ongone.anchor
              .light human_sensor
              | .onGone()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor registers a value below the&nbsp;
              a.click-flash(href="#setnearvalue", translate="no") setNearValue()
              | . The active level must change away from and then come back to&nbsp;
              a.click-flash(href="#isgone", translate="no") isGone()
              |  in order for this method to return true again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.onGone()) {
                      // code only runs once per event
                      Serial.println("Gone");
                    }
                  }

          .section
            .method-name(translate="no")
              #onnear.anchor
              .light human_sensor
              | .onNear()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor registers a value at or above the&nbsp;
              a.click-flash(href="#setnearvalue", translate="no") setNearValue()
              |  and below the&nbsp;
              a.click-flash(href="#settouchvalue", translate="no") setTouchValue()
              | . The active level must change away from and then come back to&nbsp;
              a.click-flash(href="#isnear", translate="no") isNear()
              |  in order for this method to return true again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.onNear()) {
                      // code only runs once per event
                      Serial.println("Near");
                    }
                  }

          .section
            .method-name(translate="no")
              #ontouch.anchor
              .light human_sensor
              | .onTouch()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor registers a value at or above the&nbsp;
              a.click-flash(href="#settouchvalue", translate="no") setTouchValue()
              |  and below the&nbsp;
              a.click-flash(href="#setpickupvalue", translate="no") setPickupValue()
              | . The active level must change away from and then come back to&nbsp;
              a.click-flash(href="#isnear", translate="no") isTouch()
              |  in order for this method to return true again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.onTouch()) {
                      // code only runs once per event
                      Serial.println("Touch");
                    }
                  }

          .section
            .method-name(translate="no")
              #onpickup.anchor
              .light human_sensor
              | .onPickup()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor registers a value at or above the&nbsp;
              a.click-flash(href="#setpickupvalue", translate="no") setPickupValue()
              | . The active level must change away from and then come back to&nbsp;
              a.click-flash(href="#ispickup", translate="no") isPickup()
              |  in order for this method to return true again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.onPickup()) {
                      // code only runs once per event
                      Serial.println("Pickup");
                    }
                  }

          .section
            .method-name(translate="no")
              #getvalue.anchor
              .light human_sensor
              | .getValue()
              include ./global/labels/real-time.jade
            p
              | Returns the capacitance sensor reading after being adjusted with the value given to&nbsp;
              a.click-flash(href="#setmodifier", translate="no") setModifier()
              | .
            p
              | This will return the raw capacitance sensor reading if you have not used&nbsp;
              a.click-flash(href="#setmodifier", translate="no") setModifier()
              |  yet, or if you have called&nbsp;
              a.click-flash(href="#resetmodifier", translate="no") resetModifier()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.onValueChange()) {
                      Serial.println(human_sensor.getValue());
                    }
                  }

          .section
            .method-name(translate="no")
              #getrawvalue.anchor
              .light human_sensor
              | .getRawValue()
              include ./global/labels/real-time.jade
            p
              | Returns the raw capacitance sensor reading and ignores any value that has been passed to&nbsp;
              a.click-flash(href="#setmodifier", translate="no") setModifier()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    Serial.println(human_sensor.getRawValue());
                  }

          .section
            .method-name(translate="no")
              #getactivelevel.anchor
              .light human_sensor
              | .getActiveLevel()
              include ./global/labels/real-time.jade
            p
              | Returns the current sensor level after being adjusted by&nbsp;
              a.click-flash(href="#setmodifier", translate="no") setModifier()
              | .
            ul
              li
                | &nbsp;
                b 0
                | &nbsp;&nbsp;no human is present
              li
                | &nbsp;
                b 1
                | &nbsp;&nbsp;a human is near
              li
                | &nbsp;
                b 2
                | &nbsp;&nbsp;a human is touching the sensor
              li
                | &nbsp;
                b 3
                | &nbsp;&nbsp;a human is picking up the sensor
              li
                b -1
                | &nbsp;&nbsp;an error occured (non-continuous range)
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    Serial.println(human_sensor.getActiveLevel());
                  }

          .section
            .method-name(translate="no")
              #onvaluechange.anchor
              .light human_sensor
              | .onValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the&nbsp;
              a.click-flash(href="#getvalue", translate="no") getValue()
              |  changes.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.onValueChange()) {
                      // code only runs once per event
                      Serial.println(human_sensor.getValue());
                    }
                  }

          .section
            .method-name(translate="no")
              #onrawvaluechange.anchor
              .light human_sensor
              | .onRawValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              |  changes.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.onRawValueChange()) {
                      // code only runs once per event
                      Serial.println(human_sensor.getRawValue());
                    }
                  }

          .section
            .method-name(translate="no")
              #onactivelevelchange.anchor
              .light human_sensor
              | .onActiveLevelChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the&nbsp;
              a.click-flash(href="#getactivelevel", translate="no") getActiveLevel()
              |  changes.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(human_sensor.onActiveLevelChange()) {
                      // code only runs once per event
                      Serial.println(human_sensor.getActiveLevel());
                    }
                  }

          .section
            .method-name(translate="no")
              #setmodifier.anchor
              .light human_sensor
              | .setModifier(value)
            p
              | Provide a positive or negative integer to temporarily adjust the human sensor threshold scale. The default value is 0.
            p
              i For example
              | ; if you have calibrated the scale and turn on a motor near the sensor: all readings will need to be adjusted for the increased capacitance from the motor.
            ul
              li
                | If a running motor increases the difference in human sensor readings by a&nbsp;
                a.click-flash(href="#getrawvalue", translate="no") getRawValue()
                |  of +200
              li
                | Call&nbsp;
                a.click-flash(href="#setmodifier", translate="no") setModifier(-200)
                |  on the human sensor when the motor turns on
              li
                | All of the calibrated human sensor thresholds will adjust -200
              li
                | The human sensor readings will account for motor interference
              li
                | Call&nbsp;
                a.click-flash(href="#resetmodifier", translate="no") resetModifier()
                |  on the human sensor when the motor shuts off
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(...) { // motor is on
                      human_sensor.setModifier(-200);
                    }
                    else {
                      human_sensor.resetModifier();
                    }

                    // when the motor is on; require +200 more from
                    // the raw sensor reading to trigger all events
                    if(human_sensor.isNear()) {
                      ...
                    }
                    else if(...) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #resetmodifier.anchor
              .light human_sensor
              | .resetModifier()
            p
              | Changes the&nbsp;
              a.click-flash(href="#setmodifier", translate="no") setModifier()
              |  back to 0 and resets calibration of the human sensor threshold scale.
            p
              i For example
              | ; if you have calibrated the scale and turn on a motor near the sensor: all readings will need to be adjusted for the increased capacitance from the motor.
            ul
              li
                | If a running motor increases the difference in human sensor readings by a&nbsp;
                a.click-flash(href="#getrawvalue", translate="no") getRawValue()
                |  of +200
              li
                | Call&nbsp;
                a.click-flash(href="#setmodifier", translate="no") setModifier(-200)
                |  on the human sensor when the motor turns on
              li
                | All of the calibrated human sensor thresholds will adjust -200
              li
                | The human sensor readings will account for motor interference
              li
                | Call&nbsp;
                a.click-flash(href="#resetmodifier", translate="no") resetModifier()
                |  on the human sensor when the motor shuts off
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    human_sensor.update();

                    if(...) {
                      human_sensor.setModifier(-200);
                    }
                    else {  // motor is off
                      human_sensor.resetModifier();
                    }

                    // when the motor is off; reset the
                    // threshold values for all events
                    if(human_sensor.isNear()) {
                      ...
                    }
                    else if(...) {
                      ...
                    }
                  }

          .bottom-nav.hidden.visible-xs-block
            include ./global/docs-side-nav.jade

    #modal.modal.fade(tabindex='-1', role='dialog')
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') x
            h4#modalLabel.modal-title Library Installation
          .modal-body
            .install-step
              h3 Step 1
              p.lead
                | Check your downloads folder and double-click the&nbsp;
                img(src="src/images/zip-icon.png", alt=".zip icon")
                |  HumanSensor.zip file.
            .install-step
              h3 Step 2
              p.lead
                | Move the un-zipped contents of the&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  HumanSensor folder to the Arduino&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  libraries folder:
              h5 INSTALL PATH
              div(translate="no")
                script(type="syntaxhighlighter", class="brush: shell; gutter: false;")
                  :cdata
                    Windows:       My Documents\Arduino\libraries
                    Mac & Linux:   Documents/Arduino/libraries

                h5 FOLDER STRUCTURE
                .image
                  img(src="assets/images/install-folder-structure-documents.png", alt="Documents/Arduino/Libraries")
                .image
                  img(src="assets/images/install-folder-structure-capacitance.png", alt="RBD_Capacitance")
                .image
                  img(src="assets/images/install-folder-structure-human-sensor.png", alt="RBD_HumanSensor")
                .image
                  img(src="assets/images/install-folder-structure-threshold.png", alt="RBD_Threshold")
            .install-step
              h3 Step 3
              p.lead
                | Upgrade to&nbsp;
                a(href="https://www.arduino.cc/en/Main/Software") Arduino IDE v1.5 or greater
                |  and load the&nbsp;
                a.close-modal(href="#example-sketch")
                  | Example&nbsp;
                  span(translate="no") Sketch
                |  to get started.
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') Close

    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade
    script.
      $(document).ready(function(){
        (new GithubRepo({
          user: "alextaujenis",
          repo: "RBD_HumanSensor"
        })).render();
        $(".rbd_human_sensor").addClass("selected")
      });
