doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Serial Manager Docs
    meta(name="description", content="An Arduino library with a simple event-based interface for serial communication.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        .hidden-xs.col-sm-4.stuck
          include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          .breadcrumb-container.stuck
            ol.breadcrumb
              li
                a(href="index.html") Home
              li
                a(href="docs-arduino.html") Arduino
              li.active(translate="no")
                | Serial Manager
            .breadcrumb-icons.pull-right
              .icon-container.pull-right
                a(href="https://github.com/alextaujenis/RBD_SerialManager")
                  .icon
                    .image
                      img(src='assets/images/github-logo.png', alt="GitHub Logo")
                    .text-container
                      .name View Source on GitHub
                      .subtitle With MIT License
              .icon-container.pull-right.download-button(data-toggle="tooltip", data-placement="bottom", title="Click to download the Serial Manager library")
                a.ga-events(href="assets/downloads/RBD_SerialManager.zip", data-name="RBD_SerialManager.zip")
                  .icon
                    .image
                      img(src='assets/images/zip-icon.png', alt=".zip icon")
                    .text-container
                      .name RBD_SerialManager.zip
                      .subtitle 9KB Download
              .clearfix
            .clearfix
          .jumbotron
            .click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Serial Manager
                small(translate="no")  API DOCUMENTATION
              p
                | A simple interface for serial communication.
                small v1.0.0-alpha.3
              a.btn.btn-primary(href="#example-wiring") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
              | &nbsp;&nbsp;
              a.btn.btn-default(href="https://github.com/alextaujenis/RBD_SerialManager/releases") Release Notes
          .h3
            #overview.anchor
            | Overview
          p.lead
            | The Arduino Serial object provides a great general purpose interface for sending and receiving serial commands. This library takes care of the details and allows you to quickly define and consume an event-based serial protocol.
          p
            | This is an alpha release, which means this library is functional but likely to change. Please post feedback, questions, and issues to this&nbsp;
            a(href="https://github.com/alextaujenis/RBD_SerialManager/issues") GitHub issues page
            | .
          p
            b Note: this library will look for a \n newline character at the end of each command.
            |  You must configure the Arduino Serial Monitor to include a \n newline character (next to baud rate), or call&nbsp;
            a.click-flash(href="#setflag") setFlag()
            |  to change the default value.
          .h3
            #example-wiring.anchor
            | Example Wiring
          p
            | This library communicates over the Arduino USB port set at 115200 baud:
          p
            img.img-responsive(src="assets/images/arduino-serial-manager-wiring-diagram.png", alt="A USB cord plugged into an Arduino Micro.")
          .h3
            #example-setup.anchor
            | Example Setup
            .example-sketch-buttons.nav-menu.pull-right(style="display:none;")
              label OTHER EXAMPLES:
              .btn-group(role="group")
                a.btn.btn-sm.btn-inverse.nav-item(href="#example-setup", data-toggle="tooltip", data-placement="bottom", title="Basic Example", data-target="basic-example") 1
                a.btn.btn-sm.btn-inverse.nav-item(href="#example-setup", data-toggle="tooltip", data-placement="bottom", title="LED Serial Control", data-target="led-example") 2
                a.btn.btn-sm.btn-inverse.nav-item(href="#example-setup", data-toggle="tooltip", data-placement="bottom", title="Servo Serial Control", data-target="servo-example") 3
              .clearfix
            .clearfix

          ol.basic-example.nav-content
            li
              | Install this library and load the&nbsp;
              a(href="#example-sketch") Example Sketch
              |  onto an Arduino
            li Open a serial connection at 115200 baud
            li
              | Set the Arduino Serial Monitor to include a&nbsp;
              b \n newline
              |  (next to baud rate)
            li Type something into the serial console then hit enter
            li Example command: pwm,123
            li Watch for a response printed to the serial console

          ol.led-example.nav-content(style="display: none;")
            li
              | Install this library along with the&nbsp;
              a(href="docs-arduino-light.html") Light Library
            li
              | Load the&nbsp;
              a(href="#example-sketch") Example Sketch
              |  onto an Arduino
            li Open a serial connection at 115200 baud
            li
              | Set the Arduino Serial Monitor to include a&nbsp;
              b \n newline
              |  (next to baud rate)
            li Type a command into the serial console then hit enter
            li Watch the built-in Arduino LED respond to serial commands

          ol.servo-example.nav-content(style="display: none;")
            li
              | Install this library along with the&nbsp;
              a(href="docs-arduino-servo.html") Servo Library
            li
              | Connect a servo to the Arduino as shown in the&nbsp;
              a(href="docs-arduino-servo.html#example-wiring") Servo Library Example Wiring
            li
              | Load the&nbsp;
              a(href="#example-sketch") Example Sketch
              |  onto an Arduino
            li Open a serial connection at 115200 baud
            li
              | Set the Arduino Serial Monitor to include a&nbsp;
              b \n newline
              |  (next to baud rate)
            li Type a command into the serial console then hit enter
            li Watch the servo respond to serial commands

          .h3
            #example-sketch.anchor
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++
          .basic-example.nav-content(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_SerialManager.h>

                RBD::SerialManager serial_manager;

                void setup() {
                  serial_manager.start();
                }

                void loop() {
                  if(serial_manager.onReceive()) {
                    if(serial_manager.isCmd("on")) {
                      serial_manager.println("IT'S ON!");
                    }

                    if(serial_manager.isCmd("pwm")) {
                      int value = serial_manager.getParam().toInt();
                      serial_manager.print("SET PWM ");
                      serial_manager.println(value);
                    }
                  }
                }

          .led-example.nav-content(translate="no", style="display: none;")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_SerialManager.h>
                #include <RBD_Timer.h>
                #include <RBD_Light.h>

                RBD::SerialManager usb;
                RBD::Light light(13);

                void setup() {
                  usb.start();
                }

                void loop() {
                  if(usb.onReceive()) {
                    // example serial command: on
                    if(usb.isCmd("on")) {
                      light.on();
                    }

                    // example serial command: off
                    if(usb.isCmd("off")) {
                      light.off();
                    }

                    // example serial command: pwm,123
                    if(usb.isCmd("pwm")) {
                      int pwm = usb.getParam().toInt();
                      light.setBrightness(pwm);
                    }
                  }
                }

          .servo-example.nav-content(translate="no", style="display: none;")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_SerialManager.h>
                #include <RBD_Servo.h>

                RBD::SerialManager usb;
                RBD::Servo servo(2, 700, 2300); // digital pin 2, 700ms - 2300ms pulse

                void setup() {
                  usb.start();
                }

                void loop() {
                  servo.update();

                  if(usb.onReceive()) {
                    // example serial command: up
                    if(usb.isCmd("up")) {
                      servo.moveToDegrees(180);
                    }

                    // example serial command: down
                    else if(usb.isCmd("down")) {
                      servo.moveToDegrees(0);
                    }

                    // example serial command: move,90
                    else if(usb.isCmd("move")) {
                      int _position = usb.getParam().toInt();
                      servo.moveToDegrees(_position);
                    }
                  }
                }

          .h3
            #public-methods.anchor
            | Public Methods
          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::SerialManager

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor()
            li.divider
            li
              a.click-flash(href="#start") .start()
            li
              a.click-flash(href="#setflag") .setFlag(value)
            li
              a.click-flash(href="#setdelimiter") .setDelimiter(value)
            li.divider
            li
              a.click-flash(href="#onreceive") .onReceive()
              include ./global/labels/update.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#getvalue") .getValue()
              include ./global/labels/real-time-onreceive.jade
            li.divider
            li
              a.click-flash(href="#getcmd") .getCmd()
              include ./global/labels/real-time-onreceive.jade
            li
              a.click-flash(href="#getparam") .getParam()
              include ./global/labels/real-time-onreceive.jade
            li
              a.click-flash(href="#iscmd") .isCmd(value)
              include ./global/labels/real-time-onreceive.jade
            li
              a.click-flash(href="#isparam") .isParam(value)
              include ./global/labels/real-time-onreceive.jade
            li.divider
            li
              a.click-flash(href="#print") .print(value)
            li
              a.click-flash(href="#println") .println(value)


          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::SerialManager constructor()
            p Create a new Serial Manager instance.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::SerialManager serial_manager;

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #start.anchor
              .light serial_manager
              | .start()
            p
              | Begin serial communication over the Arduino USB cable at 115200 baud. This method must be called in setup() in order to use this library.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.start();
                  }

          .section
            .method-name(translate="no")
              #setflag.anchor
              .light serial_manager
              | .setFlag(value)
            p
              | Provide a char to change the&nbsp;
              b identifier that denotes the end of each serial command
              | . This library defaults to having a terminating flag of&nbsp;
              b \n
              |  newline character. You must configure the Arduino Serial Monitor to include a newline (next to baud rate) for this library to work by default.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.setFlag(";"); // default flag \n newline
                  }

          .section
            .method-name(translate="no")
              #setdelimiter.anchor
              .light serial_manager
              | .setDelimiter(value)
            p
              | Provide a char to change the&nbsp;
              b identifier between parameters in serial commands
              | . This library defaults to having a delimiter of , comma.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    // example serial command: pwm,123
                    serial_manager.setDelimiter(","); // default delimiter
                  }

          .section
            .method-name(translate="no")
              #onreceive.anchor
              .light serial_manager
              | .onReceive()
              include ./global/labels/update.jade
              include ./global/labels/event.jade
            p
              | Returns true when a&nbsp;
              a.click-flash(href="#setflag", translate="no") setFlag()
              |  has been identified in the serial communication input stream and the parsed data is available from&nbsp;
              a.click-flash(href="#getvalue", translate="no") getValue()
              | .
            p
              | In order for this library to behave correctly; you must wrap all real-time methods in a conditional with this method (as shown below).
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.start();
                  }

                  void loop() {
                    if(serial_manager.onReceive()) {
                      // example serial command: hello world
                      serial_manager.getValue(); // returns: hello world
                    }
                  }

          .section
            .method-name(translate="no")
              #getvalue.anchor
              .light serial_manager
              | .getValue()
              include ./global/labels/real-time-onreceive.jade
            p
              | Returns a String of data parsed in chunks between&nbsp;
              a.click-flash(href="#setflag", translate="no") setFlag()
              |  from the serial communication input stream. This method must be used with&nbsp;
              a.click-flash(href="#onreceive", translate="no") onReceive()
              |  for this library to behave correctly (as shown below).
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.start();
                  }

                  void loop() {
                    if(serial_manager.onReceive()) {
                      // example serial command: hello world
                      serial_manager.getValue(); // returns: hello world
                    }
                  }

          .section
            .method-name(translate="no")
              #getcmd.anchor
              .light serial_manager
              | .getCmd()
              include ./global/labels/real-time-onreceive.jade
            p
              | Returns a String of data that is the first (or only) parameter parsed from&nbsp;
              a.click-flash(href="#getvalue", translate="no") getValue()
              | . This enables a serial command structure that follows a cmd,param template. This method must be used with&nbsp;
              a.click-flash(href="#onreceive", translate="no") onReceive()
              |  for this library to behave correctly (as shown below).
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.start();
                  }

                  void loop() {
                    if(serial_manager.onReceive()) {
                      // example serial command: pwm,123
                      serial_manager.getCmd(); // returns: pwm
                    }
                  }

          .section
            .method-name(translate="no")
              #getparam.anchor
              .light serial_manager
              | .getParam()
              include ./global/labels/real-time-onreceive.jade
            p
              | Returns a String of data that is the second parameter parsed from&nbsp;
              a.click-flash(href="#getvalue", translate="no") getValue()
              | . This enables a serial command structure that follows a cmd,param template. This method must be used with&nbsp;
              a.click-flash(href="#onreceive", translate="no") onReceive()
              |  for this library to behave correctly (as shown below).
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.start();
                  }

                  void loop() {
                    if(serial_manager.onReceive()) {
                      // example serial command: pwm,123
                      serial_manager.getParam().toInt(); // returns: 123
                    }
                  }

          .section
            .method-name(translate="no")
              #iscmd.anchor
              .light serial_manager
              | .isCmd(value)
              include ./global/labels/real-time-onreceive.jade
            p
              | Provide a String to see if it matches the current&nbsp;
              a.click-flash(href="#getcmd", translate="no") getCmd()
              | . This method must be used with&nbsp;
              a.click-flash(href="#onreceive", translate="no") onReceive()
              |  for this library to behave correctly (as shown below).
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.start();
                  }

                  void loop() {
                    if(serial_manager.onReceive()) {

                      // example serial command: on
                      if(serial_manager.isCmd("on")) {
                        // something.on();
                      }

                      // example serial command: off
                      if(serial_manager.isCmd("off")) {
                        // something.off();
                      }
                    }
                  }

          .section
            .method-name(translate="no")
              #isparam.anchor
              .light serial_manager
              | .isParam(value)
              include ./global/labels/real-time-onreceive.jade
            p
              | Provide a String to see if it matches the current&nbsp;
              a.click-flash(href="#getparam", translate="no") getParam()
              | . This method must be used with&nbsp;
              a.click-flash(href="#onreceive", translate="no") onReceive()
              |  for this library to behave correctly (as shown below).
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.start();
                  }

                  void loop() {
                    if(serial_manager.onReceive()) {
                      // example serial command: servo,up
                      if(serial_manager.isCmd("servo")) {
                        if(serial_manager.isParam("up")) {
                          // servo.moveToDegrees(180);
                        }
                      }
                    }
                  }

          .section
            .method-name(translate="no")
              #print.anchor
              .light serial_manager
              | .print(value)
            p
              | Provide any value to print to serial output. This is identical to the documented Arduino&nbsp;
              b Serial.print()
              |  function.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.start();
                  }

                  void loop() {
                    if(serial_manager.onReceive()) {
                      // echo command to serial
                      serial_manager.print(serial_manager.getValue());
                    }
                  }

          .section
            .method-name(translate="no")
              #println.anchor
              .light serial_manager
              | .println(value)
            p
              | Provide any value to print to serial output, then a carriage return and newline character will be appended. This is identical to the documented Arduino&nbsp;
              b Serial.println()
              |  function.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    serial_manager.start();
                  }

                  void loop() {
                    if(serial_manager.onReceive()) {
                      // echo command to serial with new line
                      serial_manager.println(serial_manager.getValue());
                    }
                  }

          .bottom-nav.hidden.visible-xs-block
            include ./global/docs-side-nav.jade

    #modal.modal.fade(tabindex='-1', role='dialog')
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') x
            h4#modalLabel.modal-title Library Installation
          .modal-body
            .install-step
              h3 Step 1
              p.lead
                | Check your downloads folder and double-click the&nbsp;
                img(src="src/images/zip-icon.png", alt=".zip icon")
                |  RBD_SerialManager.zip file.
            .install-step
              h3 Step 2
              p.lead
                | Move the&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |   RBD_SerialManager folder to the Arduino&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  libraries folder:
              h5 INSTALL PATH
              div(translate="no")
                script(type="syntaxhighlighter", class="brush: shell; gutter: false;")
                  :cdata
                    Windows:       My Documents\Arduino\libraries
                    Mac & Linux:   Documents/Arduino/libraries

                h5 FOLDER STRUCTURE
                .image
                  img(src="assets/images/install-folder-structure-documents.png", alt="Documents/Arduino/Libraries")
                .image
                  img(src="assets/images/install-folder-structure-serial-manager.png", alt="RBD_SerialManager")
            .install-step
              h3 Step 3
              p.lead
                | Upgrade to&nbsp;
                a(href="https://www.arduino.cc/en/Main/Software") Arduino IDE v1.5 or greater
                |  and load the&nbsp;
                a.close-modal(href="#example-sketch") Example Sketch
                |  to get started.
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') Close

    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade