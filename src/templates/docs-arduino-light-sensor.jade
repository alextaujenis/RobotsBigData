doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Light Sensor Docs
    meta(name="description", content="An Arduino library to measure light by calibrating and reading photoresistors with commands like setFloor, setCeiling, and getPercentValue.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        .hidden-xs.col-sm-4.stuck
          include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          .breadcrumb-container.stuck
            ol.breadcrumb
              li
                a(href="index.html") Home
              li
                a(href="docs-arduino.html") Arduino
              li.active(translate="no")
                | Light Sensor
            .breadcrumb-icons.pull-right
              .icon-container.pull-right
                a(href="https://github.com/alextaujenis/RBD_LightSensor")
                  .icon
                    .image
                      img(src='assets/images/github-logo.png', alt="GitHub Logo")
                    .text-container
                      .name View Source on GitHub
                      .subtitle With MIT License
              .icon-container.pull-right.download-button(data-toggle="tooltip", data-placement="bottom", title="Click to download the Light Sensor library")
                a(href="assets/downloads/RBD_LightSensor.zip")
                  .icon
                    .image
                      img(src='assets/images/zip-icon.png', alt=".zip icon")
                    .text-container
                      .name RBD_LightSensor.zip
                      .subtitle 8KB Download
              .clearfix
            .clearfix
          .jumbotron
            .stuck.click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Light Sensor
                small(translate="yes") API DOCUMENTATION
              p
                | Read and calibrate photoresistors.
                small v1.0.3
              a.btn.btn-primary(href="#example-wiring") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
              | &nbsp;&nbsp;
              a.btn.btn-default(href="https://github.com/alextaujenis/RBD_LightSensor/releases") Release Notes

          .h3
            #overview.anchor
            | Overview
          p.lead
            | Read and calibrate photoresistors.

          .h3
            #example-wiring.anchor
            | Example Wiring
          ol
            li
              | Connect one leg of a photoresistor to the Arduino&nbsp;
              span.control-wire analog pin A0
            li
              | Connect a&nbsp;
              b 10K&#8486; resistor
              |  between&nbsp;
              span.control-wire analog pin A0
              |  and&nbsp;
              span.ground-wire ground
            li
              | Connect the other leg of the photoresistor to Arduino&nbsp;
              span.hot-wire +5v pin
            li
              | Load the&nbsp;
              a(href="#example-sketch") Example Sketch
              |  onto the Arduino
            li Open a serial connection at 115200 baud
            li Watch a constant stream of the light percentage
          p
            img.img-responsive(src="assets/images/arduino-light-sensor-wiring-diagram.png", alt="A photoresistor wired to an Arduino Micro pin A0 with a 10k pull-down resistor.")

          .h3
            #example-sketch.anchor
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++
          div(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_LightSensor.h>

                RBD::LightSensor light_sensor(A0);

                void setup() {
                  Serial.begin(115200);
                }

                void loop() {
                  Serial.println(light_sensor.getPercentValue());
                }

          .h3
            #public-methods.anchor
            | Public Methods
          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::LightSensor

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor(pin)
            li.divider
            li
              a.click-flash(href="#getvalue") .getValue()
            li
              a.click-flash(href="#getrawvalue") .getRawValue()
            li
              a.click-flash(href="#getpercentvalue") .getPercentValue()
            li.divider
            li
              a.click-flash(href="#getinversevalue") .getInverseValue()
            li
              a.click-flash(href="#getinversepercentvalue") .getInversePercentValue()
            li.divider
            li
              a.click-flash(href="#setfloor") .setFloor(value)
            li
              a.click-flash(href="#setceiling") .setCeiling(value)
            li
              a.click-flash(href="#resetfloor") .resetFloor()
            li
              a.click-flash(href="#resetceiling") .resetCeiling()

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::LightSensor constructor(pin)
            p Create a new sensor and pass in the Arduino pin number.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::LightSensor light_sensor(A0);

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #getvalue.anchor
              .light light_sensor
              | .getValue()
            p
              | Returns an integer from 0 - 1023 for the current light level adjusted for the&nbsp;
              a.click-flash(href="#setfloor", translate="no") setFloor()
              |  and&nbsp;
              a.click-flash(href="#setceiling", translate="no") setCeiling()
              |  values. If the floor or ceiling are not set, this method will return&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light_sensor.getValue();
                  }

          .section
            .method-name(translate="no")
              #getrawvalue.anchor
              .light light_sensor
              | .getRawValue()
            p
              | Returns an integer from 0 - 1023 for the current light level reading from the sensor. Use this method to calibrate&nbsp;
              a.click-flash(href="#setfloor", translate="no") setFloor()
              |  and&nbsp;
              a.click-flash(href="#setceiling", translate="no") setCeiling()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light_sensor.getRawValue();
                  }

          .section
            .method-name(translate="no")
              #getpercentvalue.anchor
              .light light_sensor
              | .getPercentValue()
            p Returns an integer from 0 - 100 for the current light percentage.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light_sensor.getPercentValue();
                  }

          .section
            .method-name(translate="no")
              #getinversevalue.anchor
              .light light_sensor
              | .getInverseValue()
            p Returns an integer from 1023 - 0 for the opposite of the current light level.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light_sensor.getInverseValue();
                  }

          .section
            .method-name(translate="no")
              #getinversepercentvalue.anchor
              .light light_sensor
              | .getInversePercentValue()
            p Returns an integer from 100 - 0 for the opposite of the current light percentage.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    light_sensor.getInversePercentValue();
                  }

          .section
            .method-name(translate="no")
              #setfloor.anchor
              .light light_sensor
              | .setFloor(value)
            p
              | Provide an integer from 0 - 1023 to calibrate the sensor with a lower bounds of light detection. This will adjust the scale for all methods that return a value in this library, but will not adjust their documented output range. Calibrate the floor with help from&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    light_sensor.setFloor(10);
                  }

          .section
            .method-name(translate="no")
              #setceiling.anchor
              .light light_sensor
              | .setCeiling(value)
            p Provide an integer from 0 - 1023 to calibrate the sensor with an upper bounds of light detection. This will adjust the scale for all methods that return a value in this library, but will not adjust their documented output range. Calibrate the ceiling with help from&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    light_sensor.setCeiling(999);
                  }

          .section
            .method-name(translate="no")
              #resetfloor.anchor
              .light light_sensor
              | .resetFloor()
            p
              | Change the&nbsp;
              a.click-flash(href="#setfloor", translate="no") setFloor()
              |  value back to 0, which also resets the lower bounds of the scale for all methods that return a value in this library.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    light_sensor.resetFloor();
                  }

          .section
            .method-name(translate="no")
              #resetceiling.anchor
              .light light_sensor
              | .resetCeiling()
            p
              | Change the&nbsp;
              a.click-flash(href="#setceiling", translate="no") setCeiling()
              |  value back to 1023, which also resets the upper bounds of the scale for all methods that return a value in this library.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    light_sensor.resetCeiling();
                  }

          .bottom-nav.hidden.visible-xs-block
            include ./global/docs-side-nav.jade

    #modal.modal.fade(tabindex='-1', role='dialog')
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') x
            h4#modalLabel.modal-title Library Installation
          .modal-body
            .install-step
              h3 Step 1
              p.lead
                | Check your downloads folder and double-click the&nbsp;
                img(src="src/images/zip-icon.png", alt=".zip icon")
                |  RBD_LightSensor.zip file.
            .install-step
              h3 Step 2
              p.lead
                | Move the&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |   RBD_LightSensor folder to the Arduino&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  libraries folder:
              h5 INSTALL PATH
              div(translate="no")
                script(type="syntaxhighlighter", class="brush: shell; gutter: false;")
                  :cdata
                    Mac & Linux:   Documents/Arduino/libraries
                    Windows:       My Documents\Arduino\libraries

                h5 FOLDER STRUCTURE
                .image
                  img(src="assets/images/install-folder-structure-documents.png", alt="Documents/Arduino/Libraries")
                .image
                  img(src="assets/images/install-folder-structure-light-sensor.png", alt="RBD_LightSensor")
            .install-step
              h3 Step 3
              p.lead
                | Upgrade to&nbsp;
                a(href="https://www.arduino.cc/en/Main/Software") Arduino IDE v1.5 or greater
                |  and load the&nbsp;
                a.close-modal(href="#example-sketch") Example Sketch
                |  to get started.
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') Close


    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade