doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Water Sensor Docs
    meta(name="description", content="An Arduino library to measure and calibrate water level sensors by detecting change in capacitance.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          ol.breadcrumb.stuck
            li
              a(href="index.html") Home
            li
              a(href="docs-arduino.html") Arduino
            li.active(translate="no")
              | Water Sensor
          .jumbotron
            .stuck.click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Water Sensor
                small(translate="no") API DOCUMENTATION
              p
                | Measure and calibrate water level sensors.
                small v2.0.0
              a.btn.btn-primary(href="#how-to-install") How to Install
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#example-wiring") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
          .h3
            #overview.anchor
            | Overview
          p.lead
            | Measure and calibrate capacitance sensors to detect change in water levels from the outside of a plastic container. The example below uses a piece of aluminum foil, but you can attach the wire to anything conductive and calibrate the sensor accordingly.
          p.lead
            |This library measures relative capacitance so it is prone to interference. You can temporarily adjust the entire scale and then reset it when the capacitance disruption has stopped by using&nbsp;
            a.click-flash(href="#setmodifier", translate="no") setModifier()
            |  and&nbsp;
            a.click-flash(href="#resetmodifier", translate="no") resetModifier()
            | . Look at the&nbsp;
            a(href="docs-arduino-capacitance.html", translate="no") Capacitance Library
            |  if you would like to know more about how capacitance is calculated.
          .h3
            #how-to-install.anchor
            | How to Install
          p
            | This library is part of a larger package that you can install to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself with two dependencies.
          ul
            li
              a(href="https://github.com/alextaujenis/RBD_WaterSensor/raw/master/extras/RBD_WaterSensor.zip")
                | Download Water Sensor Library v2.0.0&nbsp;
                .label.label-warning.zip-label(translate="no") .zip
              |  by itself with the&nbsp;
              a.dark-link(href="https://github.com/alextaujenis/RBD_Capacitance/raw/master/extras/RBD_Capacitance.zip") Capacitance
              |  and&nbsp;
              a.dark-link(href="https://github.com/alextaujenis/RBD_Threshold/raw/master/extras/RBD_Threshold.zip") Threshold
              |  dependencies, or
            li
              a(href="install.html") Download All Sensor Libraries
              |  with this library and dependencies included, or
            li
              a(href="https://github.com/alextaujenis/RBD_WaterSensor") View Source on GitHub
              |  with&nbsp;
              a.dark-link(href="http://opensource.org/licenses/mit-license.php") MIT license

          .h3
            #example-wiring.anchor
            | Example Wiring
          ol
            li
              | Connect Arduino&nbsp;
              span.blue-wire digital pin 2
              |  to a&nbsp;
              b 1Meg&#8486; resistor
            li
              | Connect the other end of the&nbsp;
              b 1Meg&#8486; resistor
              |  to Arduino&nbsp;
              span.control-wire digital pin 3
            li
              | Connect Arduino&nbsp;
              span.control-wire digital pin 3
              |  to a piece of conductive material (aluminum foil)
            li
              | Tape or glue the conductive material to a non-conductive water tight container
            li
              | Load the&nbsp;
              a(href="#example-sketch") Example Sketch
              |  onto the Arduino
            li Open a serial connection at 115200 baud to see the reported values
            li
              a(href="#example-sketch-calibration") Calibrate
              |  the water level sensor
          p
            img.img-responsive(src="assets/images/arduino-water-sensor-wiring-diagram.png", alt="A piece of aluminum foil taped to a plastic cup connected to a 10 Meg Ohm resistor that is bridged across Arduino digital pins 2 and 3.")

          .h3
            #example-sketch.anchor
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++

          div(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Capacitance.h>
                #include <RBD_Threshold.h>
                #include <RBD_WaterSensor.h>

                RBD::WaterSensor water_sensor(2, 3, 3); // send, receive pin, levels

                void setup() {
                  Serial.begin(115200);
                  water_sensor.setLevel(1, 120);
                  water_sensor.setLevel(2, 154);
                  water_sensor.setLevel(3, 187);
                  water_sensor.setMaxLevel(220);
                }

                void loop() {
                  water_sensor.update();

                  if(water_sensor.onRawValueChange()) {
                    Serial.print("Active Level: ");
                    Serial.print(water_sensor.getActiveLevel());
                    Serial.print("  ---  ");
                    Serial.print("Raw Value: ");
                    Serial.println(water_sensor.getRawValue());
                  }
                }

          .h3
            #example-sketch-calibration.anchor
            | Example Sketch Calibration
          p
            | Follow these steps to calibrate each water level sensor before use:
          ol
            li Affix the water level sensor and pour water into the container
            li Stop at each level and notice the Raw Value printed to the serial console
            li
              | Use&nbsp;
              a.click-flash(href="#setlevel", translate="no") setLevel()
              |  to add each level and Raw Value -&nbsp;
              i
                | in the&nbsp;
                a(href="#example-sketch", translate="no") example sketch
                |  setup()
            li
              | After assigning&nbsp;
              a.click-flash(href="#setmaxlevel", translate="no") setMaxLevel()
              | ; pour out all water
            li Load the calibrated sketch back into the Arduino
            li The water level is calibrated and ready to use

          .h3
            #public-methods.anchor
            | Public Methods

          p
            | You must continuously call&nbsp;
            a.click-flash(href="#update", translate="no") update()
            |  inside of loop() in order to use the
            span.label.label-success Real-Time
            |  methods tagged below.

          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::WaterSensor

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor(send_pin, receive_pin, level_count)
            li.divider
            li
              a.click-flash(href="#setsamplesize") .setSampleSize(value)
            li
              a.click-flash(href="#setmodifier") .setModifier(value)
            li
              a.click-flash(href="#resetmodifier") .resetModifier()
            li.divider
            li
              a.click-flash(href="#setlevel") .setLevel(index, raw_value)
            li
              a.click-flash(href="#setmaxlevel") .setMaxLevel(raw_value)
            li.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#getvalue") .getValue()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#getrawvalue") .getRawValue()
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#getactivelevel") .getActiveLevel()
              include ./global/labels/real-time.jade
            li.divider
            li
              a.click-flash(href="#onvaluechange") .onValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onrawvaluechange") .onRawValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onactivelevelchange") .onActiveLevelChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::WaterSensor constructor(send_pin, receive_pin, level_count)
            p Pass in integers for the send and receive pins to create a new instance of this class, along with an integer for the total number of levels the water sensor will detect. Example: if you want to detect low, medium, and high levels then level_count should equal 3.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::WaterSensor water_sensor(2, 3, 3); // send, receive pin, levels

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #setsamplesize.anchor
              .light water_sensor
              | .setSampleSize(value)
            p
              | Pass in an integer to change the number of readings taken to calculate the moving average&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              | . This can be called inside of setup() or also safely at runtime inside of loop().
            ul
              li
                b Decrease Variation
                |  in readings by making this number larger: 5000
              li
                b Increase Variation
                |  in readings by making this number smaller: 100
              li
                b Default Value
                | : 1000
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    water_sensor.setSampleSize(250);
                  }

          .section
            .method-name(translate="no")
              #setmodifier.anchor
              .light water_sensor
              | .setModifier(value)
            p
              | Provide a positive or negative integer to temporarily adjust the water sensor threshold scale. The default value is 0.
            p
              i For example
              | ; if you have calibrated the scale and turn on a motor near the sensor: all readings will need to be adjusted for the increased capacitance from the motor.
            ul
              li
                | If a running motor increases the difference in water sensor readings by a&nbsp;
                a.click-flash(href="#getrawvalue", translate="no") getRawValue()
                |  of +200
              li
                | Call&nbsp;
                a.click-flash(href="#setmodifier", translate="no") setModifier(-200)
                |  on the water sensor when the motor turns on
              li
                | All of the calibrated water sensor thresholds will adjust -200
              li
                | The water sensor&nbsp;
                a.click-flash(href="#getactivelevel", translate="no") getActiveLevel()
                |  and&nbsp;
                a.click-flash(href="#getvalue", translate="no") getValue()
                |  will account for motor interference
              li
                | Call&nbsp;
                a.click-flash(href="#resetmodifier", translate="no") resetModifier()
                |  on the water sensor when the motor shuts off
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(...) { // adjust when motor is on
                      water_sensor.setModifier(-200);
                    }
                    else {
                      water_sensor.resetModifier();
                    }

                    water_sensor.update();

                    // still works as expected with interference
                    if(water_sensor.onActiveLevelChange()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #resetmodifier.anchor
              .light water_sensor
              | .resetModifier()
            p
              | Changes the&nbsp;
              a.click-flash(href="#setmodifier", translate="no") setModifier()
              |  back to 0 and resets calibration of the water sensor threshold scale.
            p
              i For example
              | ; if you have calibrated the scale and turn on a motor near the sensor: all readings will need to be adjusted for the increased capacitance from the motor.
            ul
              li
                | If a running motor increases the difference in water sensor readings by a&nbsp;
                a.click-flash(href="#getrawvalue", translate="no") getRawValue()
                |  of +200
              li
                | Call&nbsp;
                a.click-flash(href="#setmodifier", translate="no") setModifier(-200)
                |  on the water sensor when the motor turns on
              li
                | All of the calibrated water sensor thresholds will adjust -200
              li
                | The water sensor&nbsp;
                a.click-flash(href="#getactivelevel", translate="no") getActiveLevel()
                |  and&nbsp;
                a.click-flash(href="#getvalue", translate="no") getValue()
                |  will account for motor interference
              li
                | Call&nbsp;
                a.click-flash(href="#resetmodifier", translate="no") resetModifier()
                |  on the water sensor when the motor shuts off
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(...) {
                      water_sensor.setModifier(-200);
                    }
                    else { // reset when motor is off
                      water_sensor.resetModifier();
                    }

                    water_sensor.update();

                    // still works as expected with interference
                    if(water_sensor.onActiveLevelChange()) {
                      ...
                    }
                  }

          .section
            .method-name(translate="no")
              #setlevel.anchor
              .light water_sensor
              | .setLevel(index, raw_value)
            p
              | Provide an integer for the level index and a raw value from&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              | . The level index starts at one (it is not zero-based). You must also call&nbsp;
              a.click-flash(href="#setmaxlevel", translate="no") setMaxLevel()
              |  at the end to set an upper bounds of the last level.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    water_sensor.setLevel(1, 120);
                    water_sensor.setLevel(2, 154);
                    water_sensor.setLevel(3, 187);
                  }

          .section
            .method-name(translate="no")
              #setmaxlevel.anchor
              .light water_sensor
              | .setMaxLevel(raw_value)
            p
              | Provide an integer from&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              |  to set the upper-bounds threshold of the last level.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    water_sensor.setMaxLevel(220);
                  }

          .section
            .method-name(translate="no")
              #update.anchor
              .light water_sensor
              | .update()
              include ./global/labels/update.jade
            p Keep processing the readings and move this library along in real-time.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    water_sensor.update();
                  }

          .section
            .method-name(translate="no")
              #getvalue.anchor
              .light water_sensor
              | .getValue()
              include ./global/labels/real-time.jade
            p
              | Returns the capacitance sensor reading after being adjusted with the value given to&nbsp;
              a.click-flash(href="#setmodifier", translate="no") setModifier()
              | .
            p
              | This will return&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              |  if you have not used&nbsp;
              a.click-flash(href="#setmodifier", translate="no") setModifier()
              |  yet, or if you have called&nbsp;
              a.click-flash(href="#resetmodifier", translate="no") resetModifier()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    water_sensor.update();

                    if(water_sensor.onValueChange()) {
                      Serial.println(water_sensor.getValue());
                    }
                  }

          .section
            .method-name(translate="no")
              #getrawvalue.anchor
              .light water_sensor
              | .getRawValue()
              include ./global/labels/real-time.jade
            p
              | Returns the raw capacitance sensor reading and ignores any value that has been passed to&nbsp;
              a.click-flash(href="#setmodifier", translate="no") setModifier()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    water_sensor.update();

                    if(water_sensor.onRawValueChange()) {
                      Serial.println(water_sensor.getRawValue());
                    }
                  }

          .section
            .method-name(translate="no")
              #getactivelevel.anchor
              .light water_sensor
              | .getActiveLevel()
              include ./global/labels/real-time.jade
            p
              | Returns the current water level.
            ul
              li 0 means there is no water
              li 1 means the water is touching the first level
              li 2 means the water is touching the second level
              li n means the water is touching the nth level
              li sizeof(n) + 1 means the water is above the max level
              li -1 if the value was not found
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    water_sensor.update();

                    if(water_sensor.onActiveLevelChange()) {
                      Serial.println(water_sensor.getActiveLevel());
                    }
                  }

          .section
            .method-name(translate="no")
              #onvaluechange.anchor
              .light water_sensor
              | .onValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor&nbsp;
              a.click-flash(href="#getvalue", translate="no") getValue()
              |  changes. It will then return false until the reading changes to a different value again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    water_sensor.update();

                    if(water_sensor.onValueChange()) {
                      // code only runs once per event
                      Serial.println(water_sensor.getValue());
                    }
                  }

          .section
            .method-name(translate="no")
              #onrawvaluechange.anchor
              .light water_sensor
              | .onRawValueChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor&nbsp;
              a.click-flash(href="#getrawvalue", translate="no") getRawValue()
              |  changes. It will then return false until the reading changes to a different value again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    water_sensor.update();

                    if(water_sensor.onRawValueChange()) {
                      // code only runs once per event
                      Serial.println(water_sensor.getRawValue());
                    }
                  }

          .section
            .method-name(translate="no")
              #onactivelevelchange.anchor
              .light water_sensor
              | .onActiveLevelChange()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the sensor&nbsp;
              a.click-flash(href="#getactivelevel", translate="no") getActiveLevel()
              |  changes. It will then return false until the level changes to a different value again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    water_sensor.update();

                    if(water_sensor.onActiveLevelChange()) {
                      // code only runs once per event
                      Serial.println(water_sensor.getActiveLevel());
                    }
                  }

    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade