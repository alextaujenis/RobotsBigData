doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Timer Docs
    meta(name="description", content="An Arduino library to easily manage many timed events without delay, interrupts, or callbacks.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        .hidden-xs.col-sm-4.stuck
          include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          .breadcrumb-container.stuck
            ol.breadcrumb
              li
                a(href="index.html") Home
              li
                a(href="docs-arduino.html") Arduino
              li.active(translate="no")
                | Timer
            .breadcrumb-icons.pull-right
              .icon-container.pull-right
                a(href="https://github.com/alextaujenis/RBD_Timer")
                  .icon
                    .image
                      img(src='assets/images/github-logo.png', alt="GitHub Logo")
                    .text-container
                      .name View Source on GitHub
                      .subtitle With MIT License
              .icon-container.pull-right.download-button(data-toggle="tooltip", data-placement="bottom", title="Click to download the Timer library")
                a(href="assets/downloads/RBD_Timer.zip")
                  .icon
                    .image
                      img(src='assets/images/zip-icon.png', alt=".zip icon")
                    .text-container
                      .name RBD_Timer.zip
                      .subtitle 6KB Download
              .clearfix
            .clearfix
          .jumbotron
            .click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Timer
                small(translate="no")  API DOCUMENTATION
              p
                | Manage many timed events.
                small v1.2.0
              a.btn.btn-primary(href="#example-setup") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
              | &nbsp;&nbsp;
              a.btn.btn-default(href="https://github.com/alextaujenis/RBD_Timer/releases") Release Notes
          .h3
            #overview.anchor
            | Overview
          p.lead
            | The Arduino real-time loop stops advancing when you write delay() or use interrupts in your sketch. You can keep the real-time loop moving by using millis() to track time and create delay, but it's more complicated and soon becomes messy to manage.
          p.lead
            | This lightweight library manages time the same way you would by setting a waypoint and calculating elapsed millis(). It is a simple replacement to manage your timed events with english instead of math.

          .h3
            #soft-real-time.anchor
            | Soft Real-Time
          p
            | This library performs in Soft Real-Time, which means that it will mostly stay on time but is allowed to slip if performance is an issue. This could look like a microsecond of time loss when the timer expires but before it is restarted. Or this could look like a busy Arduino loop() where the timer resolution degrades to only fire an event within 25 microseconds of an actual event. (A microsecond is a small fraction of a millisecond).
          p
            | There are other solutions for Hard Real-Time problems that require exact timing, which cannot slip for any reason. These are considerations when using this timer within a project, but for the most part; performance is awesome and you should use this library.

          .h3
            #example-setup.anchor
            | Example Setup
          ol
            li Install this library and load the example sketch onto an Arduino
            li Open a serial connection at 115200 baud
            li Watch a timer print to serial every three seconds
          .h3
            #example-sketch.anchor
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++
          div(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Timer.h>

                RBD::Timer timer;

                void setup() {
                  Serial.begin(115200);
                  timer.setTimeout(3000);
                  timer.restart();
                }

                void loop() {
                  if(timer.onRestart()) {
                    Serial.println("Three seconds passed");
                  }
                }

          .h3
            #public-methods.anchor
            | Public Methods
          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Timer

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor([timeout_value])
            li.divider
            li
              a.click-flash(href="#settimeout") .setTimeout(value)
            li
              a.click-flash(href="#sethertz") .setHertz(value)
            li
              a.click-flash(href="#restart") .restart()
            li
              a.click-flash(href="#stop") .stop()
            li.divider
            li
              a.click-flash(href="#getvalue") .getValue()
            li
              a.click-flash(href="#getpercentvalue") .getPercentValue()
            li
              a.click-flash(href="#getinversevalue") .getInverseValue()
            li
              a.click-flash(href="#getinversepercentvalue") .getInversePercentValue()
            li.divider
            li
              a.click-flash(href="#isactive") .isActive()
            li
              a.click-flash(href="#isexpired") .isExpired()
            li
              a.click-flash(href="#isstopped") .isStopped()
            li.divider
            li
              a.click-flash(href="#onactive") .onActive()
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onexpired") .onExpired()
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onrestart") .onRestart()
              include ./global/labels/event.jade

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::Timer constructor([timeout_value])
            p
              | Create a new timer and pass in the [optional] timeout value (in milliseconds), which is the same as providing a value to&nbsp;
              a.click-flash(href="#settimeout") setTimeout()
              | .
            p
              | The timer has three states: active, expired, and stopped. The timer will begin in the&nbsp;
              b expired
              |  state. Call&nbsp;
              a.click-flash(href="#restart") restart()
              |  or&nbsp;
              a.click-flash(href="#onrestart") onRestart()
              |  to start using it. The timer is not constructed in the&nbsp;
              i stopped
              |  state because this disables the event-based methods of this library, such as starting a loop with&nbsp;
              a.click-flash(href="#onrestart") onRestart()
              | .

            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::Timer timer;
                  RBD::Timer timer2(200);

                  void setup() {
                    timer.setTimeout(123);     // decide timeout at runtime
                    // timer2.setTimeout(200); // already set
                  }

          .section
            .method-name(translate="no")
              #settimeout.anchor
              .light timer
              | .setTimeout(value)
            p
              | Provide an unsigned long greater than zero to change how long the timer will run (in milliseconds). This can be done in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              | , at setup(), or inside of the loop() to change the value at runtime.
              | This will override any value given to&nbsp;
              a.click-flash(href="#sethertz", translate="no") setHertz()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    timer.setTimeout(200);  // expire after 200ms
                    timer.restart();
                  }

                  void loop() {
                    if(timer.isExpired()) {
                      // returns true after 200ms
                    }
                  }

          .section
            .method-name(translate="no")
              #sethertz.anchor
              .light timer
              | .setHertz(value)
            p
              | Provide an integer from 1 - 1000 to set approximately how many times the timer will restart in one second. This can be done inside of setup() or also inside of loop() to change the value at runtime.
              | This will override any value given to&nbsp;
              a.click-flash(href="#settimeout", translate="no") setTimeout()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    timer.setHertz(5);  // expire after 200ms
                  }

                  void loop() {
                    if(timer.onRestart()) {
                      // events fired here are close to 5Hz
                    }
                  }

          .section
            .method-name(translate="no")
              #restart.anchor
              .light timer
              | .restart()
            p
              | When first created; a timer will be expired. Restart the timer to begin using it. This method can be used with&nbsp;
              a.click-flash(href="#isexpired", translate="no") isExpired()
              |  to create a continuous loop.
            p
              | Check out&nbsp;
              a.click-flash(href="#onrestart", translate="no") onRestart()
              |  to execute code at a specific interval.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(timer.isExpired()) {
                      // run code here, then restart the timer
                      timer.restart();
                    }
                  }

          .section
            .method-name(translate="no")
              #stop.anchor
              .light timer
              | .stop()
            p
              | Calling&nbsp;
              a.click-flash(href="#stop", translate="no") stop()
              |  kills all events and prohibits everything except&nbsp;
              a.click-flash(href="#isstopped", translate="no") isStopped()
              |  from returning true. You must call&nbsp;
              a.click-flash(href="#restart", translate="no") restart()
              |  to activate the timer again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(timer.onExpired()) {
                      timer.stop();
                    }

                    if(timer.isExpired()) {
                      // code here will not execute when stopped
                    }
                  }

          .section
            .method-name(translate="no")
              #getvalue.anchor
              .light timer
              | .getValue()
            p Returns an unsigned long of how many milliseconds that have passed since the start of the timer.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    Serial.println(timer.getValue());
                  }

          .section
            .method-name(translate="no")
              #getpercentvalue.anchor
              .light timer
              | .getPercentValue()
            p Returns an integer from 0 - 100 of how much time has passed as a percentage of the total interval. If the timer has run for 500ms in a 2000ms timeout: this method will return 25.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    Serial.println(timer.getPercentValue());
                  }

          .section
            .method-name(translate="no")
              #getinversevalue.anchor
              .light timer
              | .getInverseValue()
            p Returns an unsigned long of how many milliseconds left until the end of the timer.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    Serial.println(timer.getInverseValue());
                  }

          .section
            .method-name(translate="no")
              #getinversepercentvalue.anchor
              .light timer
              | .getInversePercentValue()
            p Returns an integer from 100 - 0 of the inverse of how much time has passed as a percentage of the total interval. If the timer has run for 500ms in a 2000ms timeout: this method will return 75.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    Serial.println(timer.getInversePercentValue());
                  }

          .section
            .method-name(translate="no")
              #isactive.anchor
              .light timer
              | .isActive()
            p
              | Returns true if time is available. Use this method with&nbsp;
              a.click-flash(href="#getpercentvalue", translate="no") getPercentValue()
              |  or&nbsp;
              a.click-flash(href="#getinversepercentvalue", translate="no") getInversePercentValue()
              |  to perform real-time actions tweened over time.
            p
              | Use&nbsp;
              a.click-flash(href="#onactive", translate="no") onActive()
              |  to only fire a single event when the timer goes active.

            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(timer.isActive()) {
                      Serial.println(timer.getPercentValue());
                    }
                  }

          .section
            .method-name(translate="no")
              #isexpired.anchor
              .light timer
              | .isExpired()
            p
              | Returns true if time has run out. This method can be used with&nbsp;
              a.click-flash(href="#restart", translate="no") restart()
              |  to create a continuous loop.
            p
              | Check out&nbsp;
              a.click-flash(href="#onrestart", translate="no") onRestart()
              |  to execute code at a specific interval.

            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(timer.isExpired()) {
                      // run code here and restart when finished
                      timer.restart();
                    }
                  }

          .section
            .method-name(translate="no")
              #isstopped.anchor
              .light timer
              | .isStopped()
            p
              | Returns true after calling&nbsp;
              a.click-flash(href="#stop", translate="no") stop()
              | . Returns false if the timer&nbsp;
              a.click-flash(href="#isactive", translate="no") isActive()
              |  or&nbsp;
              a.click-flash(href="#isexpired", translate="no") isExpired()
              | .
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    timer.stop();
                  }

                  void loop() {
                    if(timer.isStopped()) {
                      Serial.println("Timer Stopped");
                    }
                  }

          .section
            .method-name(translate="no")
              #onactive.anchor
              .light timer
              | .onActive()
              include ./global/labels/event.jade
            p
              | This method will fire a single event when the timer goes active. The timer must expire and then be restarted for this event to fire again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(timer.onActive()) {
                      // code only runs once per event
                      Serial.println("Timer Active");
                    }
                  }

          .section
            .method-name(translate="no")
              #onexpired.anchor
              .light timer
              | .onExpired()
              include ./global/labels/event.jade
            p
              | This method will fire a single event when the timer expires. The timer must be restarted and then allowed to expire for this event to fire again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(timer.onExpired()) {
                      // code only runs once per event
                      Serial.println("Timer Expired");
                    }
                  }

          .section
            .method-name(translate="no")
              #onrestart.anchor
              .light timer
              | .onRestart()
              include ./global/labels/event.jade
            p
              | This is a simple way of creating a loop instead of using&nbsp;
              a.click-flash(href="#isexpired", translate="no") isExpired()
              |   and&nbsp;
              a.click-flash(href="#restart", translate="no") restart()
              |  together. Use this to execute code at a specific interval.
            p
              | This method will identify when the timer expires, restart the timer, then allow a block of code to execute. It then waits for the timer to expire to perform these actions again.

            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(timer.onRestart()) {
                      // timer just expired, then restarted
                      // code only runs once per restart
                      Serial.println("Timer Restarted");
                    }
                  }

          .bottom-nav.hidden.visible-xs-block
            include ./global/docs-side-nav.jade

    #modal.modal.fade(tabindex='-1', role='dialog')
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') x
            h4#modalLabel.modal-title Library Installation
          .modal-body
            .install-step
              h3 Step 1
              p.lead
                | Check your downloads folder and double-click the&nbsp;
                img(src="src/images/zip-icon.png", alt=".zip icon")
                |  RBD_Timer.zip file.
            .install-step
              h3 Step 2
              p.lead
                | Move the&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |   RBD_Timer folder to the Arduino&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  libraries folder:
              h5 INSTALL PATH
              div(translate="no")
                script(type="syntaxhighlighter", class="brush: shell; gutter: false;")
                  :cdata
                    Windows:       My Documents\Arduino\libraries
                    Mac & Linux:   Documents/Arduino/libraries

                h5 FOLDER STRUCTURE
                .image
                  img(src="assets/images/install-folder-structure-documents.png", alt="Documents/Arduino/Libraries")
                .image
                  img(src="assets/images/install-folder-structure-timer.png", alt="RBD_Timer")
            .install-step
              h3 Step 3
              p.lead
                | Upgrade to&nbsp;
                a(href="https://www.arduino.cc/en/Main/Software") Arduino IDE v1.5 or greater
                |  and load the&nbsp;
                a.close-modal(href="#example-sketch") Example Sketch
                |  to get started.
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') Close

    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade