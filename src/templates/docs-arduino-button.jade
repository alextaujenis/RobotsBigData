doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Button Docs
    meta(name="description", content="Read and debounce buttons and switches without delay or interrupts. React to button events with the onPressed() and onReleased() commands.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        .hidden-xs.col-sm-4.stuck
          include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          .breadcrumb-container.stuck
            ol.breadcrumb
              li
                a(href="index.html") Home
              li
                a(href="docs-arduino.html") Arduino
              li.active(translate="no")
                | Button
            .breadcrumb-icons.pull-right
              .icon-container.pull-right
                a(href="https://github.com/alextaujenis/RBD_Button")
                  .icon
                    .image
                      img(src='assets/images/github-logo.png', alt="GitHub Logo")
                    .text-container
                      .name View Source on GitHub
                      .subtitle With MIT License
              .icon-container.pull-right.download-button(data-toggle="tooltip", data-placement="bottom", title="Click to download the Button library with the Timer dependency")
                a.ga-events(href="assets/downloads/Button.zip", data-name="Button.zip")
                  .icon
                    .image
                      img(src='assets/images/zip-icon.png', alt=".zip icon")
                    .text-container
                      .name Button.zip
                      .subtitle 16KB Download
              .clearfix
            .clearfix
          .jumbotron
            .click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Button
                small(translate="yes") API DOCUMENTATION
              p
                | Read and debounce buttons and switches.
                small v2.1.0
              a.btn.btn-primary(href="#example-wiring") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
              | &nbsp;&nbsp;
              a.btn.btn-default(href="https://github.com/alextaujenis/RBD_Button/releases") Release Notes

          .h3
            #overview.anchor
            | Overview
          p.lead
            | Read and debounce buttons and switches without delay or interrupts. React to button events with the&nbsp;
            a.click-flash(href="#onpressed", translate="no") onPressed()
            |  and&nbsp;
            a.click-flash(href="#onreleased", translate="no") onReleased()
            |  commands. Control debounce time with&nbsp;
            a.click-flash(href="#setdebouncetimeout", translate="no") setDebounceTimeout()
            | .
          p.lead
            | This library sets each button up as input_pullup by default, allowing you to wire the button to any digital input and ground. Input_pullup can be disabled by passing an optional flag to the&nbsp;
            a.click-flash(href="#constructor", translate="no") constructor()
            |  and wiring the button with your own resistor.

          .h3
            #example-wiring.anchor
            | Example Wiring
            .example-sketch-buttons.nav-menu.pull-right(style="display:none;")
              label OTHER EXAMPLES:
              .btn-group(role="group")
                a.btn.btn-sm.btn-inverse.nav-item(href="#example-wiring", data-toggle="tooltip", data-placement="bottom", title="input_pullup enabled (recommended)", data-target="basic-example") 1
                a.btn.btn-sm.btn-inverse.nav-item(href="#example-wiring", data-toggle="tooltip", data-placement="bottom", title="input_pullup disabled", data-target="disable-input-pullup-example") 2
              .clearfix
            .clearfix
          ol.basic-example.nav-content
            li
              | Connect the Arduino&nbsp;
              span.ground-wire ground pin
              |  to one of the button terminals
            li
              | Connect the Arduino&nbsp;
              span.control-wire digital pin 2
              |  to the other button terminal
            li
              | Load the&nbsp;
              a(href="#example-sketch") Example Sketch
              |  onto the Arduino
            li
              | Open a serial connection at 115200 baud and press the button
          p.basic-example.nav-content
            img.img-responsive(src="assets/images/arduino-button-wiring-diagram.png", alt="A mechanical push button wired to an Arduino Micro pin 2 and ground.")

          ol.disable-input-pullup-example.nav-content(style="display:none;")
            li
              | Connect the Arduino&nbsp;
              span.ground-wire ground pin
              |  to one of the button terminals
            li
              | Connect the Arduino&nbsp;
              span.control-wire digital pin 2
              |  to the other button terminal
            li
              | Bridge a&nbsp;
              b 10K&#8486; pull up resistor
              |  from the&nbsp;
              span.hot-wire +5v pin
              |  to&nbsp;
              span.control-wire digital pin 2
            li
              | Load the&nbsp;
              a(href="#example-sketch") Example Sketch
              |  onto the Arduino
            li
              | Open a serial connection at 115200 baud and press the button
          p.disable-input-pullup-example.nav-content(style="display:none;")
            img.img-responsive(src="assets/images/arduino-button-disable-input-pullup-wiring-diagram.png", alt="A mechanical push button wired to an Arduino Micro pin 2 and ground with a 10k ohm pull up resistor.")

          .h3
            #example-sketch.anchor
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++

          .basic-example.nav-content(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Timer.h>
                #include <RBD_Button.h>

                RBD::Button button(2); // input_pullup by default

                void setup() {
                  Serial.begin(115200);
                }

                void loop() {
                  if(button.onPressed()) {
                    Serial.println("Button Pressed");
                  }

                  if(button.onReleased()) {
                    Serial.println("Button Released");
                  }
                }

          .disable-input-pullup-example.nav-content(translate="no", style="display: none;")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Timer.h>
                #include <RBD_Button.h>

                // input_pullup disabled, circuit must include an external resistor
                RBD::Button button(2, false); // pin number, input_pullup flag

                void setup() {
                  Serial.begin(115200);
                }

                void loop() {
                  if(button.onPressed()) {
                    Serial.println("Button Pressed");
                  }

                  if(button.onReleased()) {
                    Serial.println("Button Released");
                  }
                }

          .h3
            #public-methods.anchor
            | Public Methods

          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Button

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor(pin, [input_pullup])
            li.divider
            li
              a.click-flash(href="#setdebouncetimeout") .setDebounceTimeout(value)
            li
              a.click-flash(href="#invertreading") .invertReading()
            li.divider
            li
              a.click-flash(href="#ispressed") .isPressed()
            li
              a.click-flash(href="#isreleased") .isReleased()
            li
              a.click-flash(href="#onpressed") .onPressed()
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onreleased") .onReleased()
              include ./global/labels/event.jade

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::Button constructor(pin, [input_pullup])
            p Create a new button and pass in the Arduino pin number. This library will default to input_pullup and invert the button readings to simplify wiring for you. Pass in the second [optional] parameter as false to disable input_pullup.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::Button button(2);

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #setdebouncetimeout.anchor
              .light button
              | .setDebounceTimeout(value)
            p Provide an unsigned long value greater than zero to set the debounce time in milliseconds. Most mechanical buttons will flip between on and off very quickly before settling in the correct state after being pressed or switched. Adjusting the debounce timeout will help remove these extra state-change events.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    button.setDebounceTimeout(10) // default ms
                  }

          .section
            .method-name(translate="no")
              #invertreading.anchor
              .light button
              | .invertReading()
            p
              | Flip the value of the raw button state reading so when the button&nbsp;
              a.click-flash(href="#ispressed", translate="no") isPressed()
              |  it will register as&nbsp;
              a.click-flash(href="#isreleased", translate="no") isReleased()
              | , and vice versa. This method changes the behavior for&nbsp;
              a.click-flash(href="#onpressed", translate="no") onPressed()
              |  and&nbsp;
              a.click-flash(href="#onreleased", translate="no") onReleased()
              |  as well.

            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    button.invertReading();
                  }

          .section
            .method-name(translate="no")
              #ispressed.anchor
              .light button
              | .isPressed()
            p
              | Returns true while the button is being pressed, or is on. Returns false while the button is not being pressed, or is off.
            p
              | This method is good for real-time actions that must fire many times during a button press. Use the&nbsp;
              a.click-flash(href="#onpressed", translate="no") onPressed()
              |  event to fire only one action on each button press.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(button.isPressed()) {
                      // code executes on each loop
                      Serial.println("Button Pressed");
                    }
                  }

          .section
            .method-name(translate="no")
              #isreleased.anchor
              .light button
              | .isReleased()
            p
              | Returns true while the button is released, or is off. Returns false while the button is being pressed, or is on.
            p
              | This method is good for real-time actions that must fire many times while the button is not pressed. Use the&nbsp;
              a.click-flash(href="#onreleased", translate="no") onReleased()
              |  event to fire only one action on each button release.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(button.isReleased()) {
                      // code executes on each loop
                      Serial.println("Button Released");
                    }
                  }

          .section
            .method-name(translate="no")
              #onpressed.anchor
              .light button
              | .onPressed()
              include ./global/labels/event.jade
            p
              | This will return true only once, after the button has been pressed (and debounced). The button must be released and then pressed again for this method to return true again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(button.onPressed()) {
                      // code only runs once per event
                      Serial.println("Button Pressed Event");
                    }
                  }

          .section
            .method-name(translate="no")
              #onreleased.anchor
              .light button
              | .onReleased()
              include ./global/labels/event.jade
            p
              | This will return true only once, after the button has been released (and debounced). The button must be pressed and then released again for this method to return true again.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(button.onReleased()) {
                      // code only runs once per event
                      Serial.println("Button Released Event");
                    }
                  }

          .bottom-nav.hidden.visible-xs-block
            include ./global/docs-side-nav.jade

    #modal.modal.fade(tabindex='-1', role='dialog')
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') x
            h4#modalLabel.modal-title Library Installation
          .modal-body
            .install-step
              h3 Step 1
              p.lead
                | Check your downloads folder and double-click the&nbsp;
                img(src="src/images/zip-icon.png", alt=".zip icon")
                |  Button.zip file.
            .install-step
              h3 Step 2
              p.lead
                | Move the un-zipped contents of the&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  Button folder to the Arduino&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  libraries folder:
              h5 INSTALL PATH
              div(translate="no")
                script(type="syntaxhighlighter", class="brush: shell; gutter: false;")
                  :cdata
                    Windows:       My Documents\Arduino\libraries
                    Mac & Linux:   Documents/Arduino/libraries

                h5 FOLDER STRUCTURE
                .image
                  img(src="assets/images/install-folder-structure-documents.png", alt="Documents/Arduino/Libraries")
                .image
                  img(src="assets/images/install-folder-structure-button.png", alt="RBD_Button")
                .image
                  img(src="assets/images/install-folder-structure-timer.png", alt="RBD_Timer")
            .install-step
              h3 Step 3
              p.lead
                | Upgrade to&nbsp;
                a(href="https://www.arduino.cc/en/Main/Software") Arduino IDE v1.5 or greater
                |  and load the&nbsp;
                a.close-modal(href="#example-sketch") Example Sketch
                |  to get started.
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') Close

    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade