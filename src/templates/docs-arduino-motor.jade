doctype html
html(lang='en')
  head
    title Robots + Big Data: Motor Documentation
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          ol.breadcrumb.stuck
            li
              a(href="index.html") Home
            li
              a(href="docs-arduino.html") Arduino
            li.active
              | Motor
            a.pull-right.edit-page(href="https://github.com/alextaujenis/RobotsBigData/edit/gh-pages/src/templates/docs-arduino-motor.jade", data-toggle="tooltip", data-placement="left", title="Edit this page on GitHub.") edit
          .jumbotron
            .stuck.click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2
                | Motor
                small  API DOCUMENTATION
              p
                | Control many motors.
                small v1.1.0
              a.btn.btn-success(href="#download") Download
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#example-sketch") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
          h3
            a(name="overview")
            | Overview
          p.lead
            | Control motors without delay with commands like&nbsp;
            a.click-flash(href="#on") on()
            | ,&nbsp;
            a.click-flash(href="#off") off()
            | ,&nbsp;
            a.click-flash(href="#forward") forward()
            | ,&nbsp;
            a.click-flash(href="#reverse") reverse()
            | , and&nbsp;
            a.click-flash(href="#ramp") ramp()
            | . Fire custom events when the motor has reached the target speed with&nbsp;
            a.click-flash(href="#ontargetspeed") onTargetSpeed()
            | , or when it has changed direction with the&nbsp;
            a.click-flash(href="#onforward") onForward()
            |  and&nbsp;
            a.click-flash(href="#onreverse") onReverse()
            |  events.
          p.lead
            | Motors can be wired to move in a single direction, or can be driven in both directions with the help of a motor-shield or H bridge and this library.
          h3
            a(name="download")
            | Download
          p
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself with one dependency.
          p
            ul
              li
                a(href="https://github.com/alextaujenis/RBD_Motor/raw/master/extras/RBD_Motor.zip")
                  | Download Motor Library v1.1.0&nbsp;
                  label.label.label-warning.zip-label .zip
                |  by itself with the&nbsp;
                a.dark-link(href="https://github.com/alextaujenis/RBD_Timer/raw/master/extras/RBD_Timer.zip") Timer
                |  dependency, or
              li
                a(href="install.html") Download All Sensor Libraries
                |  with this library and dependency included, or
              li
                a(href="https://github.com/alextaujenis/RBD_Motor") View Source on GitHub
                |  with&nbsp;
                a.dark-link(href="http://opensource.org/licenses/mit-license.php") MIT license
          h3
            a(name="example-sketch")
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++


          script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
            :cdata
              #include <RBD_Timer.h>
              #include <RBD_Motor.h>

              // motor shield
              RBD::Motor motor(9, 11, 8); // pwm pin, forward pin, reverse pin

              void setup() {
                motor.rampUp(5000);
              }

              void loop() {
                motor.update();

                if(motor.onTargetSpeed()) {
                  if(motor.isOn()) {
                    motor.rampDown(3000);
                  }
                  else {
                    motor.toggleDirection();
                    motor.rampUp(5000);
                  }
                }
              }
          h3
            a(name="public-methods")
            | Public Methods

          p
            | You can use this library without calling&nbsp;
            a.click-flash(href="#update") update()
            |  and&nbsp;
            i most
            |  methods will function correctly. You must continuously call&nbsp;
            a.click-flash(href="#update") update()
            |  inside of loop() in order to use the
            span.label.label-success RT
            |  (Real-Time) methods tagged below.

          h4.class-name
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Motor

          ul.public-methods
            li
              a.click-flash(href="#constructor") constructor(pwm_pin, [forward_pin], [reverse_pin])
            hr.divider
            li
              a.click-flash(href="#on") .on()
            li
              a.click-flash(href="#off") .off()
            li
              a.click-flash(href="#forward") .forward()
            li
              a.click-flash(href="#reverse") .reverse()
            li
              a.click-flash(href="#toggledirection") .toggleDirection()
            li
              a.click-flash(href="#setpwm") .setPwm(value)
            li
              a.click-flash(href="#setpwmpercent") .setPwmPercent(value)
            hr.divider
            li
              a.click-flash(href="#ison") .isOn()
            li
              a.click-flash(href="#isoff") .isOff()
            li
              a.click-flash(href="#isforward") .isForward()
            li
              a.click-flash(href="#isreverse") .isReverse()
            li
              a.click-flash(href="#getpwm") .getPwm()
            li
              a.click-flash(href="#getpwmpercent") .getPwmPercent()
            li
              a.click-flash(href="#ispwm") .isPwm(value)
            li
              a.click-flash(href="#ispwmpercent") .isPwmPercent(value)
            hr.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#timedon") .timedOn(timeout)
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#rampup") .rampUp(timeout)
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#rampdown") .rampDown(timeout)
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#ramp") .ramp(value, timeout)
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#ramppercent") .rampPercent(value, timeout)
              include ./global/labels/real-time.jade
            hr.divider
            li
              a.click-flash(href="#onforward") .onForward()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onreverse") .onReverse()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#ontargetspeed") .onTargetSpeed()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade

          .section
            a(name="constructor")
            h4 RBD::Motor constructor(pwm_pin, [forward_pin], [reverse_pin])
            p
              | Create a new motor and pass in the Arduino pwm pin number. The forward and reverse pins are optional and can be used to control the motor in both directions with the help of a motor-shield or H bridge. The motor will be set&nbsp;
              a.click-flash(href="#forward") forward()
              |  by default if you provide the forward and reverse pins.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                // motor shield
                RBD::Motor motor(9, 11, 8); // pwm pin, forward pin, reverse pin

                void setup() {
                  ...
                }

          .section
            a(name="on")
            h4
              .light motor
              | .on()
            p
              | Start the motor at full speed.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.on();
                }

          .section
            a(name="off")
            h4
              .light motor
              | .off()
            p Stop the motor.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.off();
                }

          .section
            a(name="forward")
            h4
              .light motor
              | .forward()
            p
              | Set the spin direction for the motor so that all new commands move it forward. The motor is set&nbsp;
              a.click-flash(href="#forward") forward()
              |  by default.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              |  and correctly wire the motor to use this method. The motor should be spun to a full-stop before calling this method. This library will forcibly stop the motor before switching to the forward state.

            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.forward();
                  motor.rampUp(3000);
                }

          .section
            a(name="reverse")
            h4
              .light motor
              | .reverse()
            p
              | Set the spin direction for the motor so that all new commands move it in reverse.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              |  and correctly wire the motor to use this method. The motor should be spun to a full-stop before calling this method. This library will forcibly stop the motor before switching to the reverse state.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.reverse();
                  motor.rampUp(3000);
                }

          .section
            a(name="toggledirection")
            h4
              .light motor
              | .toggleDirection()
            p
              | Flip the spin direction for the motor so that all new commands will move it in the opposite direction than they do currently. This alternates between&nbsp;
              a.click-flash(href="#forward") forward()
              |  and&nbsp;
              a.click-flash(href="#reverse") reverse()
              | .
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              |  and correctly wire the motor to use this method. The motor should be spun to a full-stop before calling this method. This library will forcibly stop the motor before toggling to the new state.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  if(...) {
                    motor.toggleDirection();
                    motor.rampUp(3000);
                  }
                }

          .section
            a(name="setpwm")
            h4
              .light motor
              | .setPwm(value)
            p Pass in an integer from 0 - 255 to control the speed of the motor.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.setPwm(85); // one-third speed
                }

          .section
            a(name="setpwmpercent")
            h4
              .light motor
              | .setPwmPercent(value)
            p
              | Pass in an integer from 0 - 100 to control the speed percentage of the motor. This is essentially the same as&nbsp;
              a.click-flash(href="#setpwm") setPwm()
              |  but with a smaller input scale.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.setPwmPercent(50); // half speed
                }

          .section
            a(name="ison")
            h4
              .light motor
              | .isOn()
            p
              | Returns true if the motor is running at 100% speed.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.on();
                }

                void loop() {
                  Serial.println(motor.isOn());
                }

          .section
            a(name="isoff")
            h4
              .light motor
              | .isOff()
            p
              | Returns true if the motor is running at 0% speed.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.off();
                }

                void loop() {
                  Serial.println(motor.isOff());
                }

          .section
            a(name="isforward")
            h4
              .light motor
              | .isForward()
            p
              | Returns true if the motor is set in the&nbsp;
              a.click-flash(href="#forward") forward()
              |  state.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              |  and correctly wire the motor to use this method.

            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(motor.isForward());
                }

          .section
            a(name="isreverse")
            h4
              .light motor
              | .isReverse()
            p
              | Returns true if the motor is set in the&nbsp;
              a.click-flash(href="#reverse") reverse()
              |  state.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              |  and correctly wire the motor to use this method.

            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(motor.isReverse());
                }

          .section
            a(name="getpwm")
            h4
              .light motor
              | .getPwm()
            p
              | Returns an integer from 0 - 255 for the current motor speed.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.setPwm(123);
                }

                void loop() {
                  Serial.println(motor.getPwm());
                }

          .section
            a(name="getpwmpercent")
            h4
              .light motor
              | .getPwmPercent()
            p
              | Returns an integer from 0 - 100 for the current motor speed percentage.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.setPwmPercent(45);
                }

                void loop() {
                  Serial.println(motor.getPwmPercent());
                }

          .section
            a(name="ispwm")
            h4
              .light motor
              | .isPwm(value)
            p
              | Provide an integer from 0 to 255 and this will return true if it's equal to the current&nbsp;
              a.click-flash(href="#getpwm") getPwm()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.ramp(99, 1000);
                }

                void loop() {
                  motor.update()

                  if(motor.onTargetSpeed()) {
                    if(motor.isPwm(99)) {
                      ...
                    }
                  }
                }

          .section
            a(name="ispwmpercent")
            h4
              .light motor
              | .isPwmPercent(value)
            p
              | Provide an integer from 0 to 100 and this will return true if it's equal to the current&nbsp;
              a.click-flash(href="#getpwmpercent") getPwmPercent()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.rampPercent(45, 1000);
                }

                void loop() {
                  motor.update()

                  if(motor.onTargetSpeed()) {
                    if(motor.isPwmPercent(45)) {
                      ...
                    }
                  }
                }

          .section
            a(name="update")
            h4
              .light motor
              | .update()
              include ./global/labels/update.jade
            p Keep the real-time functions processing with each loop(). This must be called continuously within loop() in order to use any real-time methods.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void loop() {
                  motor.update();
                }

          .section
            a(name="timedon")
            h4
              .light motor
              | .timedOn(timeout)
              include ./global/labels/real-time.jade
            p
              | Start the motor at full speed and turn it off after the specified time in milliseconds.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.timedOn(5000);
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="rampup")
            h4
              .light motor
              | .rampUp(timeout)
              include ./global/labels/real-time.jade
            p Pass in a timeout in milliseconds for how long it will take to ramp from the current speed to full speed with a linear transition.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.rampUp(3000);
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="rampdown")
            h4
              .light motor
              | .rampDown(timeout)
              include ./global/labels/real-time.jade
            p Pass in a timeout in milliseconds for how long it will take to ramp from the current speed to full stop with a linear transition.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.on();
                  motor.rampDown(4000);
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="ramp")
            h4
              .light motor
              | .ramp(value, timeout)
              include ./global/labels/real-time.jade
            p Pass in a value from 0 - 255 to control the target speed of the motor, and a timeout in milliseconds for how long it will take to ramp to that target speed from the current speed with a linear transition.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.ramp(85, 2000); // one-third speed in 2 seconds
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="ramppercent")
            h4
              .light motor
              | .rampPercent(value, timeout)
              include ./global/labels/real-time.jade
            p
              | Pass in a value from 0 - 100 to control the target speed of the motor, and a timeout in milliseconds for how long it will take to ramp to that target speed from the current speed with a linear transition. This is essentially the same as&nbsp;
              a.click-flash(href="#ramp") ramp()
              |  but with a smaller input scale.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.rampPercent(50, 1000); // half speed in 1 second
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="onforward")
            h4
              .light motor
              | .onForward()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the motor starts moving&nbsp;
              a.click-flash(href="#forward") forward()
              | . This method will then return false until the motor has stopped, moved in reverse, then started moving forward again.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              |  and correctly wire the motor to use this method.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.rampUp(5000);
                }

                void loop() {
                  motor.update();

                  if(motor.onForward()) {
                    // code only runs once per event
                    Serial.println("Moving Forward");
                  }
                }

          .section
            a(name="onreverse")
            h4
              .light motor
              | .onReverse()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the motor starts moving in&nbsp;
              a.click-flash(href="#reverse") reverse()
              | . This method will then return false until the motor has stopped, moved forward, then started moving in reverse again.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor") constructor()
              |  and correctly wire the motor to use this method.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.reverse();
                  motor.rampUp(5000);
                }

                void loop() {
                  motor.update();

                  if(motor.onReverse()) {
                    // code only runs once per event
                    Serial.println("Moving in Reverse");
                  }
                }

          .section
            a(name="ontargetspeed")
            h4
              .light motor
              | .onTargetSpeed()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the motor hits the target speed set in any of the real-time methods. This method will then return false until a new target speed is set (with a real-time method) and then achieved by the motor.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                void setup() {
                  motor.off();
                  motor.rampPercent(50, 5000);
                }

                void loop() {
                  motor.update();

                  if(motor.onTargetSpeed()) {
                    // code only runs once per event
                    Serial.println("Target Speed");
                  }
                }

    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade
    include ./global/footer.jade