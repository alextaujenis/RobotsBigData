doctype html
html(lang='en')
  head
    title Robots + Big Data: Arduino Motor Docs
    meta(name="description", content="An Arduino library to control many motors using commands like on, off, forward, reverse, and ramp.")
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        .hidden-xs.col-sm-4.stuck
          include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          .breadcrumb-container.stuck
            ol.breadcrumb
              li
                a(href="index.html") Home
              li
                a(href="docs-arduino.html") Arduino
              li.active(translate="no")
                | Motor
            .breadcrumb-icons.pull-right
              .icon-container.pull-right
                a(href="https://github.com/alextaujenis/RBD_Motor")
                  .icon
                    .image
                      img(src='assets/images/github-logo.png', alt="GitHub Logo")
                    .text-container
                      .name View Source on GitHub
                      .subtitle With MIT License
              .icon-container.pull-right.download-button(data-toggle="tooltip", data-placement="bottom", title="Click to download the Motor library with the Timer dependency")
                a(href="assets/downloads/Motor.zip")
                  .icon
                    .image
                      img(src='assets/images/zip-icon.png', alt=".zip icon")
                    .text-container
                      .name Motor.zip
                      .subtitle 22KB Download
              .clearfix
            .clearfix
          .jumbotron
            .stuck.click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2(translate="no")
                | Motor
                small(translate="yes") API DOCUMENTATION
              p
                | Control many motors.
                small v2.1.0
              a.btn.btn-primary(href="#example-wiring") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
              | &nbsp;&nbsp;
              a.btn.btn-default(href="https://github.com/alextaujenis/RBD_Motor/releases") Release Notes

          .h3
            #overview.anchor
            | Overview
          p.lead
            | Control motors without delay with commands like&nbsp;
            a.click-flash(href="#on", translate="no") on()
            | ,&nbsp;
            a.click-flash(href="#off", translate="no") off()
            | ,&nbsp;
            a.click-flash(href="#forward", translate="no") forward()
            | ,&nbsp;
            a.click-flash(href="#reverse", translate="no") reverse()
            | , and&nbsp;
            a.click-flash(href="#ramp", translate="no") ramp()
            | . Fire custom events when the motor has reached the target speed with&nbsp;
            a.click-flash(href="#ontargetspeed", translate="no") onTargetSpeed()
            | , or when it has changed direction with the&nbsp;
            a.click-flash(href="#onforward", translate="no") onForward()
            |  and&nbsp;
            a.click-flash(href="#onreverse", translate="no") onReverse()
            |  events.
          p.lead
            | Motors can be wired to move in a single direction, or can be driven in both directions with the help of a motor-shield or H bridge and this library.

          .h3
            #example-wiring.anchor
            | Example Wiring
          p
            | This is a high powered motor driver circuit that can spin a single motor at variable speed in one direction. It is called a low-side switch that includes over-current and inductive kickback protection. The motor can be powered from batteries or a DC adapter. This circuit requires an Arduino PWM pin for variable speed control.
          ol
            li
              | Connect a motor and&nbsp;
              i power supply
              |  (batteries or DC adapter)
            li
              | Add a&nbsp;
              b diode
              |  across the&nbsp;
              span.hot-wire positive
              |  and&nbsp;
              span.ground-wire negative&nbsp;
              i motor pins
            li
              | Add a N-Channel Logic Level&nbsp;
              b MOSFET
              |  to the circuit
            li
              | Connect the&nbsp;
              b MOSFET Gate
              |  to a&nbsp;
              b 10K&#8486; resistor
              |  bridged to&nbsp;
              b ground
            li
              | Also connect the&nbsp;
              b MOSFET Gate
              |  to a&nbsp;
              b 150&#8486; resistor
              |  bridged to&nbsp;
              span.control-wire PWM pin 3
            li
              | Connect the&nbsp;
              b MOSFET Drain
              |  to the&nbsp;
              b negative&nbsp;
              i motor pin
            li
              | Connect the&nbsp;
              b MOSFET Source
              |  to the&nbsp;
              b negative&nbsp;
              i power supply
            li
              | Connect the Arduino&nbsp;
              b ground
              |  to the circuit
            li
              | Load the&nbsp;
              a(href="#example-sketch") Example Sketch
              |  onto the Arduino
            li Watch the motor spin up and down
          p
            img.img-responsive(src="assets/images/arduino-motor-wiring-diagram.png", alt="A motor wired to a low-side switch, a battery pack, and an Arduino Micro PWM pin 3.")
          .h3
            #forward-and-reverse.anchor
            | Forward & Reverse
          p
            | The&nbsp;
            a(href="#example-wiring") Example Wiring
            |  circuit only spins the motor in one direction, but this library is capable of forward and reverse. To enable this capability you should use a motor shield or H bridge, then specify the [optional] forward and reverse pins in the&nbsp;
            a.click-flash(href="#constructor", translate="no") constructor()
            | . See the forward and reverse example included with installing this library.

          .h3
            #example-sketch.anchor
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++

          div(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                #include <RBD_Timer.h>
                #include <RBD_Motor.h>

                RBD::Motor motor(3); // PWM pin

                void setup() {
                  motor.rampUp(5000);
                }

                void loop() {
                  motor.update();

                  if(motor.onTargetSpeed()) {
                    if(motor.isOn()) {
                      motor.rampDown(3000);
                    }
                    else {
                      motor.rampUp(5000);
                    }
                  }
                }

          .h3
            #public-methods.anchor
            | Public Methods
          p
            | You can use this library without calling&nbsp;
            a.click-flash(href="#update", translate="no") update()
            |  and&nbsp;
            i most
            |  methods will function correctly. You must continuously call&nbsp;
            a.click-flash(href="#update", translate="no") update()
            |  inside of loop() in order to use the
            span.label.label-success Real-Time
            |  methods tagged below.

          h4.class-name(translate="no")
            script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
              :cdata
                RBD::Motor

          ul.public-methods(translate="no")
            li
              a.click-flash(href="#constructor") constructor(pwm_pin, [forward_pin], [reverse_pin])
            li.divider
            li
              a.click-flash(href="#on") .on()
            li
              a.click-flash(href="#off") .off()
            li
              a.click-flash(href="#forward") .forward()
            li
              a.click-flash(href="#reverse") .reverse()
            li
              a.click-flash(href="#toggledirection") .toggleDirection()
            li
              a.click-flash(href="#setspeed") .setSpeed(value)
            li
              a.click-flash(href="#setspeedpercent") .setSpeedPercent(value)
            li.divider
            li
              a.click-flash(href="#ison") .isOn()
            li
              a.click-flash(href="#isoff") .isOff()
            li
              a.click-flash(href="#isforward") .isForward()
            li
              a.click-flash(href="#isreverse") .isReverse()
            li
              a.click-flash(href="#getspeed") .getSpeed()
            li
              a.click-flash(href="#getspeedpercent") .getSpeedPercent()
            li.divider
            li
              a.click-flash(href="#update") .update()
              include ./global/labels/update.jade
            li
              a.click-flash(href="#timedon") .timedOn(timeout)
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#rampup") .rampUp(timeout)
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#rampdown") .rampDown(timeout)
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#ramp") .ramp(value, timeout)
              include ./global/labels/real-time.jade
            li
              a.click-flash(href="#ramppercent") .rampPercent(value, timeout)
              include ./global/labels/real-time.jade
            li.divider
            li
              a.click-flash(href="#onforward") .onForward()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#onreverse") .onReverse()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            li
              a.click-flash(href="#ontargetspeed") .onTargetSpeed()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade

          .section
            .method-name(translate="no")
              #constructor.anchor
              | RBD::Motor constructor(pwm_pin, [forward_pin], [reverse_pin])
            p
              | Create a new motor and pass in the Arduino PWM pin number. The forward and reverse pins are [optional] and can be used to control the motor in both directions with the help of a motor shield or H bridge. The motor will be set&nbsp;
              a.click-flash(href="#forward", translate="no") forward()
              |  by default if you provide the forward and reverse pins.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  RBD::Motor motor(3); // PWM pin

                  void setup() {
                    ...
                  }

          .section
            .method-name(translate="no")
              #on.anchor
              .light motor
              | .on()
            p
              | Start the motor at full speed.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.on();
                  }

          .section
            .method-name(translate="no")
              #off.anchor
              .light motor
              | .off()
            p Stop the motor.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.off();
                  }

          .section
            .method-name(translate="no")
              #forward.anchor
              .light motor
              | .forward()
            p
              | Set the spin direction for the motor so that all new commands move it forward. The motor is set&nbsp;
              a.click-flash(href="#forward", translate="no") forward()
              |  by default.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor", translate="no") constructor()
              |  and correctly wire the motor to use this method. The motor should be spun to a full-stop before calling this method. This library will forcibly stop the motor before switching to the forward state.

            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.forward();
                    motor.rampUp(3000);
                  }

          .section
            .method-name(translate="no")
              #reverse.anchor
              .light motor
              | .reverse()
            p
              | Set the spin direction for the motor so that all new commands move it in reverse.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor", translate="no") constructor()
              |  and correctly wire the motor to use this method. The motor should be spun to a full-stop before calling this method. This library will forcibly stop the motor before switching to the reverse state.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.reverse();
                    motor.rampUp(3000);
                  }

          .section
            .method-name(translate="no")
              #toggledirection.anchor
              .light motor
              | .toggleDirection()
            p
              | Flip the spin direction for the motor so that all new commands will move it in the opposite direction than they do currently. This alternates between&nbsp;
              a.click-flash(href="#forward", translate="no") forward()
              |  and&nbsp;
              a.click-flash(href="#reverse", translate="no") reverse()
              | .
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor", translate="no") constructor()
              |  and correctly wire the motor to use this method. The motor should be spun to a full-stop before calling this method. This library will forcibly stop the motor before toggling to the new state.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    if(...) {
                      motor.toggleDirection();
                      motor.rampUp(3000);
                    }
                  }

          .section
            .method-name(translate="no")
              #setspeed.anchor
              .light motor
              | .setSpeed(value)
            p Pass in an integer from 0 - 255 to control the speed of the motor.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.setSpeed(85); // one-third speed
                  }

          .section
            .method-name(translate="no")
              #setspeedpercent.anchor
              .light motor
              | .setSpeedPercent(value)
            p
              | Pass in an integer from 0 - 100 to control the speed percentage of the motor. This is essentially the same as&nbsp;
              a.click-flash(href="#setspeed", translate="no") setSpeed()
              |  but with a smaller input scale.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.setSpeedPercent(50); // half speed
                  }

          .section
            .method-name(translate="no")
              #ison.anchor
              .light motor
              | .isOn()
            p
              | Returns true if the motor is running at 100% speed.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.on();
                  }

                  void loop() {
                    Serial.println(motor.isOn());
                  }

          .section
            .method-name(translate="no")
              #isoff.anchor
              .light motor
              | .isOff()
            p
              | Returns true if the motor is running at 0% speed.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.off();
                  }

                  void loop() {
                    Serial.println(motor.isOff());
                  }

          .section
            .method-name(translate="no")
              #isforward.anchor
              .light motor
              | .isForward()
            p
              | Returns true if the motor is set in the&nbsp;
              a.click-flash(href="#forward", translate="no") forward()
              |  state.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor", translate="no") constructor()
              |  and correctly wire the motor to use this method.

            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    Serial.println(motor.isForward());
                  }

          .section
            .method-name(translate="no")
              #isreverse.anchor
              .light motor
              | .isReverse()
            p
              | Returns true if the motor is set in the&nbsp;
              a.click-flash(href="#reverse", translate="no") reverse()
              |  state.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor", translate="no") constructor()
              |  and correctly wire the motor to use this method.

            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    Serial.println(motor.isReverse());
                  }

          .section
            .method-name(translate="no")
              #getspeed.anchor
              .light motor
              | .getSpeed()
            p
              | Returns an integer from 0 - 255 for the current motor speed.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.setSpeed(123);
                  }

                  void loop() {
                    Serial.println(motor.getSpeed());
                  }

          .section
            .method-name(translate="no")
              #getspeedpercent.anchor
              .light motor
              | .getSpeedPercent()
            p
              | Returns an integer from 0 - 100 for the current motor speed percentage.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.setSpeedPercent(45);
                  }

                  void loop() {
                    Serial.println(motor.getSpeedPercent());
                  }

          .section
            .method-name(translate="no")
              #update.anchor
              .light motor
              | .update()
              include ./global/labels/update.jade
            p Keep the real-time functions processing with each loop(). This must be called continuously within loop() in order to use any real-time methods.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void loop() {
                    motor.update();
                  }

          .section
            .method-name(translate="no")
              #timedon.anchor
              .light motor
              | .timedOn(timeout)
              include ./global/labels/real-time.jade
            p
              | Start the motor at full speed and turn it off after the specified time in milliseconds.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.timedOn(5000);
                  }

                  void loop() {
                    motor.update();
                  }

          .section
            .method-name(translate="no")
              #rampup.anchor
              .light motor
              | .rampUp(timeout)
              include ./global/labels/real-time.jade
            p Pass in a timeout in milliseconds for how long it will take to ramp from the current speed to full speed with a linear transition.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.rampUp(3000);
                  }

                  void loop() {
                    motor.update();
                  }

          .section
            .method-name(translate="no")
              #rampdown.anchor
              .light motor
              | .rampDown(timeout)
              include ./global/labels/real-time.jade
            p Pass in a timeout in milliseconds for how long it will take to ramp from the current speed to full stop with a linear transition.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.on();
                    motor.rampDown(4000);
                  }

                  void loop() {
                    motor.update();
                  }

          .section
            .method-name(translate="no")
              #ramp.anchor
              .light motor
              | .ramp(value, timeout)
              include ./global/labels/real-time.jade
            p Pass in a value from 0 - 255 to control the target speed of the motor, and a timeout in milliseconds for how long it will take to ramp to that target speed from the current speed with a linear transition.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.ramp(85, 2000); // one-third speed in 2 seconds
                  }

                  void loop() {
                    motor.update();
                  }

          .section
            .method-name(translate="no")
              #ramppercent.anchor
              .light motor
              | .rampPercent(value, timeout)
              include ./global/labels/real-time.jade
            p
              | Pass in a value from 0 - 100 to control the target speed of the motor, and a timeout in milliseconds for how long it will take to ramp to that target speed from the current speed with a linear transition. This is essentially the same as&nbsp;
              a.click-flash(href="#ramp", translate="no") ramp()
              |  but with a smaller input scale.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.rampPercent(50, 1000); // half speed in 1 second
                  }

                  void loop() {
                    motor.update();
                  }

          .section
            .method-name(translate="no")
              #onforward.anchor
              .light motor
              | .onForward()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the motor starts moving&nbsp;
              a.click-flash(href="#forward", translate="no") forward()
              | . This method will then return false until the motor has stopped, moved in reverse, then started moving forward again.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor", translate="no") constructor()
              |  and correctly wire the motor to use this method.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.rampUp(5000);
                  }

                  void loop() {
                    motor.update();

                    if(motor.onForward()) {
                      // code only runs once per event
                      Serial.println("Moving Forward");
                    }
                  }

          .section
            .method-name(translate="no")
              #onreverse.anchor
              .light motor
              | .onReverse()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the motor starts moving in&nbsp;
              a.click-flash(href="#reverse", translate="no") reverse()
              | . This method will then return false until the motor has stopped, moved forward, then started moving in reverse again.
            p
              | You must provide the optional forward and reverse pins in the&nbsp;
              a.click-flash(href="#constructor", translate="no") constructor()
              |  and correctly wire the motor to use this method.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.reverse();
                    motor.rampUp(5000);
                  }

                  void loop() {
                    motor.update();

                    if(motor.onReverse()) {
                      // code only runs once per event
                      Serial.println("Moving in Reverse");
                    }
                  }

          .section
            .method-name(translate="no")
              #ontargetspeed.anchor
              .light motor
              | .onTargetSpeed()
              include ./global/labels/real-time.jade
              include ./global/labels/event.jade
            p
              | This method will return true once the motor hits the target speed set in any of the real-time methods. This method will then return false until a new target speed is set (with a real-time method) and then achieved by the motor.
            h5
              | EXAMPLE&nbsp;
              span(translate="no") SKETCH
            div(translate="no")
              script(type="syntaxhighlighter", class="brush: arduino; gutter: false;")
                :cdata
                  void setup() {
                    motor.off();
                    motor.rampPercent(50, 5000);
                  }

                  void loop() {
                    motor.update();

                    if(motor.onTargetSpeed()) {
                      // code only runs once per event
                      Serial.println("Target Speed");
                    }
                  }

          .bottom-nav.hidden.visible-xs-block
            include ./global/docs-side-nav.jade

    #modal.modal.fade(tabindex='-1', role='dialog')
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') x
            h4#modalLabel.modal-title Library Installation
          .modal-body
            .install-step
              h3 Step 1
              p.lead
                | Check your downloads folder and double-click the&nbsp;
                img(src="src/images/zip-icon.png", alt=".zip icon")
                |  Motor.zip file.
            .install-step
              h3 Step 2
              p.lead
                | Move the un-zipped contents of the&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  Motor folder to the Arduino&nbsp;
                img(src="src/images/folder-icon.png", alt="folder icon")
                |  libraries folder:
              h5 INSTALL PATH
              div(translate="no")
                script(type="syntaxhighlighter", class="brush: shell; gutter: false;")
                  :cdata
                    Windows:       My Documents\Arduino\libraries
                    Mac & Linux:   Documents/Arduino/libraries

                h5 FOLDER STRUCTURE
                .image
                  img(src="assets/images/install-folder-structure-documents.png", alt="Documents/Arduino/Libraries")
                .image
                  img(src="assets/images/install-folder-structure-motor.png", alt="RBD_Motor")
                .image
                  img(src="assets/images/install-folder-structure-timer.png", alt="RBD_Timer")
            .install-step
              h3 Step 3
              p.lead
                | Upgrade to&nbsp;
                a(href="https://www.arduino.cc/en/Main/Software") Arduino IDE v1.5 or greater
                |  and load the&nbsp;
                a.close-modal(href="#example-sketch") Example Sketch
                |  to get started.
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') Close

    include ./global/footer.jade
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade