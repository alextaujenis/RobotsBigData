doctype html
html(lang='en')
  head
    title Robots + Big Data: Light Sensor Documentation
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .content.documentation.col-sm-9.col-lg-10
          ol.breadcrumb
            li
              a(href="index.html") Home
            li
              a(href="docs.html") Docs
            li
              a(href="docs-sensor.html") Arduino Sensor Libraries
            li.active
              | Light Sensor
          .jumbotron
            h2
              | Light Sensor
              small  API DOCUMENTATION
            p A simple library for reading photoresistors.
            a.btn.btn-success(href="#download") Download
            | &nbsp;&nbsp;
            a.btn.btn-default(href="#example") See Example
            | &nbsp;&nbsp;
            a.btn.btn-default(href="#public-methods") Public Methods

          h3
            a(name="download")
            | Download
          p.lead
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors, or you can download this library by itself.
          p
            ul
              li
                a(href="#") Download Robots + Big Data Sensor Package
                |  with this library included
              li
                a(href="#") Download Standalone Library
              li
                a(href="#") View Source on GitHub
                |  with MIT license

          h3
            a(name="example")
            | Example
          script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
            :cdata
              #include <LightSensor.h>
              #define BAUD 115200

              LightSensor light_sensor(A0);

              void setup() {
                Serial.begin(BAUD);
              }

              void loop() {
                Serial.println(light_sensor.getPercentValue());
              }

          h3
            a(name="public-methods")
            | Public Methods
          h4.class-name
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                LightSensor
          ul
            li
              a.click-flash(href="#constructor-pin") constructor(pin)
            li
              a.click-flash(href="#getvalue") .getValue()
            li
              a.click-flash(href="#getinversevalue") .getInverseValue()
            li
              a.click-flash(href="#getpercentvalue") .getPercentValue()
            li
              a.click-flash(href="#getinversepercentvalue") .getInversePercentValue()

          .section
            a(name="constructor-pin")
            h4 LightSensor constructor(pin)
            p Create a new sensor and pass in the Arduino pin number.
            h5 EXAMPLE
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                LightSensor light_sensor(A0);

                void setup() {
                  ...
                }

          .section
            a(name="getvalue")
            h4 light_sensor.getValue()
            p Returns an integer from 0 - 1023 for the current light level.
            h5 EXAMPLE
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.getValue();
                }

          .section
            a(name="getinversevalue")
            h4 light_sensor.getInverseValue()
            p Returns an integer from 1023 - 0 for the opposite of the current light level.
            h5 EXAMPLE
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.getInverseValue();
                }

          .section
            a(name="getpercentvalue")
            h4 light_sensor.getPercentValue()
            p Returns an integer from 0 - 100 for the current light percentage.
            h5 EXAMPLE
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.getPercentValue();
                }

          .section
            a(name="getinversepercentvalue")
            h4 light_sensor.getInversePercentValue()
            p Returns an integer from 100 - 0 for the opposite of the current light percentage.
            h5 EXAMPLE
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.getInversePercentValue();
                }

          .section-bottom
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade


