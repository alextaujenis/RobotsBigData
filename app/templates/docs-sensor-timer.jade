doctype html
html(lang='en')
  head
    title Robots + Big Data: Timer Documentation
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        a(name="description")
        .documentation.col-sm-9.col-lg-10
          ol.breadcrumb
            li
              a(href="index.html") Home
            li
              a(href="docs.html") Docs
            li.active
              | Timer
          .row.pull-right
            .col-xs-12
              span.label.label-info.title-label Arduino
          .jumbotron
            h2
              | Timer
              small  API DOCUMENTATION
            p A high-level foundation for managing many timed events.
            a.btn.btn-success(href="#download") Download
            | &nbsp;&nbsp;
            a.btn.btn-default(href="#example-setup") See Example
            | &nbsp;&nbsp;
            a.btn.btn-default(href="#public-methods") Public Methods

          h3
            a(name="overview")
            | Overview
          p.lead
            | The Arduino real-time loop stops advancing when you write delay() in your sketch. You can keep the real-time loop moving by using millis() to track time and create delay, but it's more complicated and soon becomes messy to manage. The Timer class is a very simple replacement for all your millis() math.

          h3
            a(name="relativevsabsolute")
            | Relative vs. Absolute Time
          p.lead
            | This library works well with relative time instead of absolute. Absolute timing (for example) of running on an&nbsp;
            b interval of precisely 5 minutes
            |  would incure&nbsp;
            b a few microseconds of time loss
            |  each cycle. You can get a&nbsp;
            i pretty close
            |  interval by restarting the timer immediately if you don't mind losing one second every few hundred-thousand timeout cycles.

            p
              | This library is&nbsp;
              b better suited for managing immediate program flow
              |  over relative time, (for example) like starting a timer and using the reported percentage to dim an LED&nbsp;
              b over the course of 1 second
              | . It will not lose any time during the active cycle. You should use this timer really hard while it's active, then consider it dead and restart it to use it again.


          h3
            a(name="download")
            | Download
          p.lead
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself.
          p
            ul
              li
                a(href="#") Download Full Sensor Package
                |  with this library included
              li
                a(href="#") Download Timer Library
                |  by itself
              li
                a(href="#") View Source on GitHub
                |  with MIT license

          h3
            a(name="example-setup")
            | Example Setup
          p.lead
            ol
              li Install this library and load the example sketch on to an Arduino
              li Open a serial connection at 115200 BAUD
              li Watch two independent timers report their status
          h3
            a(name="example-sketch")
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++

          script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
            :cdata
              #include <Timer.h>

              #define BAUD 115200
              bool rising = true;

              Timer timer1;
              Timer timer2;

              void setup() {
                Serial.begin(BAUD);
                timer1.setTimeout(3000);
                timer2.setHertz(1);
                timer1.restart();
                timer2.restart();
              }

              void loop() {
                updateTimer1();
                updateTimer2();
              }

              void updateTimer1() {
                if(timer1.isExpired()) {
                  timer1.restart();
                  Serial.println("THREE SECONDS PASSED");
                }
              }

              void updateTimer2() {
                if(timer2.isActive()) {
                  if(rising) { Serial.println(timer2.getPercentValue()); }
                  else { Serial.println(timer2.getInversePercentValue()); }
                }
                else {
                  timer2.restart();
                  rising = !rising;
                }
              }

          h3
            a(name="public-methods")
            | Public Methods
          h4.class-name
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                Timer

          ul.public-methods
            li
              a.click-flash(href="#constructor") constructor()
            li
              a.click-flash(href="#settimeout") .setTimeout(value)
            li
              a.click-flash(href="#sethertz") .setHertz(value)
            li
              a.click-flash(href="#restart") .restart()
            li
              a.click-flash(href="#isactive") .isActive()
            li
              a.click-flash(href="#isexpired") .isExpired()
            li
              a.click-flash(href="#getvalue") .getValue()
            li
              a.click-flash(href="#getinversevalue") .getInverseValue()
            li
              a.click-flash(href="#getpercentvalue") .getPercentValue()
            li
              a.click-flash(href="#getinversepercentvalue") .getInversePercentValue()

          .section
            a(name="constructor")
            h4 Timer constructor()
            p Create a new timer instance.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                Timer timer;

                void setup() {
                  ...
                }

          .section
            a(name="settimeout")
            h4 timer.setTimeout(value)
            p
              | Provide an unsigned long value to change how long the timer will run (in milliseconds). This can be done inside of setup() or also inside of loop() to change the value at runtime.
              | This will override any value given to&nbsp;
              a.click-flash(href="#sethertz") .setHertz()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  timer.setTimeout(200);  // expire after 200ms
                }

                void loop() {
                  if(timer.isExpired()) {
                    // events fired here about every 200ms
                    timer.restart();
                  }
                }

          .section
            a(name="sethertz")
            h4 timer.setHertz(value)
            p
              | Provide an integer greater than 0 and up to 1000 to set approximately how many times you can fire an event in one second. This can be done inside of setup() or also inside of loop() to change the value at runtime.
              | This will override any value given to&nbsp;
              a.click-flash(href="#settimeout") .setTimeout()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  timer.setHertz(5);  // expire after 200ms
                }

                void loop() {
                  if(timer.isExpired()) {
                    // events fired here are close to 5Hz
                    timer.restart();
                  }
                }

          .section
            a(name="restart")
            h4 timer.restart()
            p
              | There are no start or stop methods. All you need to do restart the timer when you want to use it. When you first initialize the timer; it will always start expired.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  if(timer.isExpired()) {
                    timer.restart();
                  }
                }

          .section
            a(name="isactive")
            h4 timer.isActive()
            p Returns true if time is available.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(timer.isActive());
                }

          .section
            a(name="isexpired")
            h4 timer.isExpired()
            p Returns true if time has run out.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(timer.isExpired());
                }

          .section
            a(name="getvalue")
            h4 timer.getValue()
            p Returns an unsigned long of how many milliseconds that have passed since the start of the timer.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(timer.getValue());
                }

          .section
            a(name="getinversevalue")
            h4 timer.getInverseValue()
            p Returns an unsigned long of how many milliseconds left until the end of the timer.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(timer.getInverseValue());
                }

          .section
            a(name="getpercentvalue")
            h4 timer.getPercentValue()
            p Returns an integer from 0 - 100 of how much time has passed as a percentage of the total interval. If the interval is 2000ms, and 500ms have passed: this method will return 25.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(timer.getPercentValue());
                }

          .section
            a(name="getinversepercentvalue")
            h4 timer.getInversePercentValue()
            p Returns an unsigned long of how many milliseconds left until the end of the timer.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(timer.getInversePercentValue());
                }



          .section-bottom
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade


