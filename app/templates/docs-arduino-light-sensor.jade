doctype html
html(lang='en')
  head
    title Robots + Big Data: Light Sensor Documentation
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .documentation.col-sm-8.col-md-9
          ol.breadcrumb.stuck
            li
              a(href="index.html") Home
            li
              a(href="docs-arduino.html") Arduino
            li.active
              | Light Sensor
            a.pull-right.edit-page(href="https://github.com/alextaujenis/RobotsBigData/") edit
          .jumbotron
            .stuck
              .row.jumbotron-header
                .col-xs-12.text-right
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2
                | Light Sensor
                small  API DOCUMENTATION
              p
                | Read and calibrate photoresistors.
                small v1.0.0
              a.btn.btn-success(href="#download") Download
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#example-sketch") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
          h3
            a(name="download")
            | Download
          p.lead
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself.
          p
            ul
              li
                a(href="#") Download Full Sensor Package
                |  with this library included
              li
                a(href="#") Download Light Sensor Library v1.0.0
                |  by itself
              li
                a(href="https://github.com/alextaujenis/RBD_LightSensor") View Source on GitHub
                |  with MIT license

          h3
            a(name="example-sketch")
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++

          script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
            :cdata
              #include <RBD_LightSensor.h>
              #define BAUD 115200

              RBD::LightSensor light_sensor(A0);

              void setup() {
                Serial.begin(BAUD);
              }

              void loop() {
                Serial.println(light_sensor.getPercentValue());
              }

          h3
            a(name="public-methods")
            | Public Methods
          h4.class-name
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                RBD::LightSensor

          ul.public-methods
            li
              a.click-flash(href="#constructor") constructor(pin)
            li
              a.click-flash(href="#getvalue") .getValue()
            li
              a.click-flash(href="#getrawvalue") .getRawValue()
            li
              a.click-flash(href="#getinversevalue") .getInverseValue()
            li
              a.click-flash(href="#getpercentvalue") .getPercentValue()
            li
              a.click-flash(href="#getinversepercentvalue") .getInversePercentValue()
            li
              a.click-flash(href="#setfloor") .setFloor(value)
            li
              a.click-flash(href="#setceiling") .setCeiling(value)
            li
              a.click-flash(href="#resetfloor") .resetFloor()
            li
              a.click-flash(href="#resetceiling") .resetCeiling()

          .section
            a(name="constructor")
            h4 RBD::LightSensor constructor(pin)
            p Create a new sensor and pass in the Arduino pin number.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                RBD::LightSensor light_sensor(A0);

                void setup() {
                  ...
                }

          .section
            a(name="getvalue")
            h4 light_sensor.getValue()
            p
              | Returns an integer from 0 - 1023 for the current light level adjusted for the&nbsp;
              a.click-flash(href="#setfloor") setFloor()
              |  and&nbsp;
              a.click-flash(href="#setceiling") setCeiling()
              |  values. If the floor or ceiling are not set, this method will return&nbsp;
              a.click-flash(href="#getrawvalue") getRawValue()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.getValue();
                }

          .section
            a(name="getrawvalue")
            h4 light_sensor.getRawValue()
            p
              | Returns an integer from 0 - 1023 for the current light level reading from the sensor. Use this method to calibrate&nbsp;
              a.click-flash(href="#setfloor") setFloor()
              |  and&nbsp;
              a.click-flash(href="#setceiling") setCeiling()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.getValue();
                }

          .section
            a(name="getinversevalue")
            h4 light_sensor.getInverseValue()
            p Returns an integer from 1023 - 0 for the opposite of the current light level.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.getInverseValue();
                }

          .section
            a(name="getpercentvalue")
            h4 light_sensor.getPercentValue()
            p Returns an integer from 0 - 100 for the current light percentage.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.getPercentValue();
                }

          .section
            a(name="getinversepercentvalue")
            h4 light_sensor.getInversePercentValue()
            p Returns an integer from 100 - 0 for the opposite of the current light percentage.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.getInversePercentValue();
                }

          .section
            a(name="setfloor")
            h4 light_sensor.setFloor(value)
            p
              | Provide an integer from 0 - 1023 to calibrate the sensor with a lower bounds of light detection. This will adjust the scale for all methods that return a value in this library, but will not adjust their documented output range. Calibrate the floor with help from&nbsp;
              a.click-flash(href="#getrawvalue") getRawValue()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.setFloor(10);
                }

          .section
            a(name="setceiling")
            h4 light_sensor.setCeiling(value)
            p Provide an integer from 0 - 1023 to calibrate the sensor with an upper bounds of light detection. This will adjust the scale for all methods that return a value in this library, but will not adjust their documented output range. Calibrate the ceiling with help from&nbsp;
              a.click-flash(href="#getrawvalue") getRawValue()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.setCeiling(999);
                }

          .section
            a(name="resetfloor")
            h4 light_sensor.resetFloor()
            p
              | Change the&nbsp;
              a.click-flash(href="#setfloor") setFloor()
              |  value back to 0, which also resets the lower bounds of the scale for all methods that return a value in this library.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.resetFloor();
                }

          .section
            a(name="resetceiling")
            h4 light_sensor.resetCeiling()
            p
              | Change the&nbsp;
              a.click-flash(href="#setceiling") setCeiling()
              |  value back to 1023, which also resets the upper bounds of the scale for all methods that return a value in this library.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  light_sensor.resetCeiling();
                }

          .section-bottom
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade


