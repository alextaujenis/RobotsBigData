doctype html
html(lang='en')
  head
    title Robots + Big Data: Water Sensor Documentation
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        a(name="description")
        .documentation.col-sm-9.col-lg-10
          ol.breadcrumb
            li
              a(href="index.html") Home
            li
              a(href="docs.html#description") Docs
            li.active
              | Water Sensor
          .row.pull-right
            .col-xs-12
              span.label.label-info.title-label Arduino
          .jumbotron
            h2
              | Water Sensor
              small  API DOCUMENTATION
            p
              | Measure and calibrate capacitance water sensors in real-time.
              small v1.0.0
            a.btn.btn-success(href="#download") Download
            | &nbsp;&nbsp;
            a.btn.btn-default(href="#example-setup") See Example
            | &nbsp;&nbsp;
            a.btn.btn-default(href="#public-methods") Public Methods

          h3
            a(name="download")
            | Download
          p.lead
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself with three dependencies.
          p
            ul
              li
                a(href="#") Download Full Sensor Package
                |  with this library included
              li
                a(href="#") Download Water Sensor Library v1.0.0
                |  with&nbsp;
                span.badge 3
                | &nbsp;
                a.dependency(href="docs-sensor-capacitance.html#description") Capacitance
                | ,&nbsp;
                a.dependency(href="docs-sensor-threshold.html#description") Threshold
                | , and&nbsp;
                a.dependency(href="docs-sensor-timer.html#description") Timer
                |  dependencies
              li
                a(href="https://github.com/alextaujenis/RBD_WaterSensor") View Source on GitHub
                |  with MIT license

          h3
            a(name="example-setup")
            | Example Setup
          p.lead
            ol
              li Bridge a 10Meg Ohm resistor across the send (tx 1) and receive (rx 0) pins
              li Run a length of wire from the receive (rx 0) pin to a strip of aluminum foil
              li Tape the foil to the side of a water-tight non-conductive (plastic) container
              li Load up the example sketch and open a serial connection at 115200 baud
              li Pour water into your container and change the raw threshold values in the sketch to match the levels
              li Pour out the water, then compile and load the calibrated sketch back into the Arduino
              li Your water level is calibrated and ready to use
          h3
            a(name="example-sketch")
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++


          script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
            :cdata
              #include <WaterSensor.h>
              #include <Capacitance.h>
              #include <Threshold.h>
              #include <Timer.h>

              #define BAUD        115200
              #define SEND_PIN    1
              #define RECEIVE_PIN 0
              #define LEVEL_COUNT 3

              int past_value  = 0;

              WaterSensor water_sensor(SEND_PIN, RECEIVE_PIN, LEVEL_COUNT);

              void setup() {
                Serial.begin(BAUD);
                water_sensor.setAccuracy(1000);
                water_sensor.setRefreshRate(2);
                water_sensor.setLevel(1, 120);
                water_sensor.setLevel(2, 154);
                water_sensor.setLevel(3, 187);
                water_sensor.setMaxLevel(220);
              }

              void loop() {
                water_sensor.update();

                if(water_sensor.getRawValue() != past_value) {
                  printValues(water_sensor.getActiveLevel(), water_sensor.getRawValue());
                  past_value = water_sensor.getRawValue();
                }
              }

              void printValues(int active_level, int raw_value) {
                Serial.print("ACTIVE LEVEL: ");
                Serial.print(active_level);
                Serial.print("  RAW VALUE: ");
                Serial.println(raw_value);
              }
          h3
            a(name="public-methods")
            | Public Methods

          p
            | You must continuously call&nbsp;
            a.click-flash(href="#update") update()
            |  inside of loop() in order to use the&nbsp;
            span.label.label-success REAL-TIME
            |  methods tagged below.

          h4.class-name
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                WaterSensor

          ul.public-methods
            li
              a.click-flash(href="#constructor") constructor(send_pin, receive_pin, level_count)
            li
              a.click-flash(href="#update") .update()
              span.label.label-primary(data-toggle="tooltip", data-placement="right", title="This helps move real-time methods along.") PROCESS REAL-TIME
            li
              a.click-flash(href="#setaccuracy") .setAccuracy(value)
            li
              a.click-flash(href="#setrefreshrate") .setRefreshRate(hertz)
            li
              a.click-flash(href="#startrealtime") .startRealTime()
            li
              a.click-flash(href="#setlevel") .setLevel(index, raw_value)
            li
              a.click-flash(href="#setmaxlevel") .setMaxLevel(raw_value)
            li
              a.click-flash(href="#getrawvalue") .getRawValue()
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            li
              a.click-flash(href="#getactivelevel") .getActiveLevel()
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME

          .section
            a(name="constructor")
            h4 WaterSensor constructor(send_pin, receive_pin, level_count)
            p Pass in integers for the send and receive pins to create a new instance of this class, along with an integer for the total number of levels your water sensor will detect. Example: if you want to detect low, medium, and high levels then the level_count should be 3.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                WaterSensor water_sensor(1,0,3);

                void setup() {
                  ...
                }

          .section
            a(name="update")
            h4
              | water_sensor.update()
              span.label.label-primary(data-toggle="tooltip", data-placement="right", title="This helps move real-time methods along.") PROCESS REAL-TIME
            p Keep processing the readings and move this library along in real-time.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  water_sensor.update();
                }

          .section
            a(name="setaccuracy")
            h4 water_sensor.setAccuracy(value)
            p
              | Provide an integer of how many readings to average before reporting a value. Increasing the value will increase accuracy and take longer to compute. Decreasing the value will lower accuracy and take a shorter time to compute. This can possibly affect the actual refresh rate to make it take slower readings. Don't worry, you can be as accurate as you'd like because this is done in a non-blocking manner and it won't affect your main loop() performance.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  water_sensor.setAccuracy(1000);
                }

          .section
            a(name="setrefreshrate")
            h4 water_sensor.setRefreshRate(hertz)
            p
              | Provide an integer from 0 to 1000 to set the maximum number of times the sensor should update per second. This is meant to be used to limit the number of readings taken per second. Calling this method will kick the sensor out of real-time readings if you have previously called&nbsp;
              a.click-flash(href="#startrealtime") startRealTime()
              |  . Set this value to 0 to completely stop the sensor from taking readings. If you make this faster than the sensor can read values (because of a high accuracy value): the library will naturally settle at taking readings in real-time.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  water_sensor.setRefreshRate();
                }

          .section
            a(name="startrealtime")
            h4 water_sensor.startRealTime()
            p
              | Start collecting readings as fast as possible and remove the&nbsp;
              a.click-flash(href="#setrefreshrate") setRefreshRate()
              |  limit.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  water_sensor.startRealTime();
                }

          .section
            a(name="setlevel")
            h4 water_sensor.setLevel(index, raw_value)
            p
              | Add a value for the lower bounds of each level.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  water_sensor.setLevel(1, 0);  // 0 - 33
                  water_sensor.setLevel(2, 34); // 34 - 66
                  water_sensor.setLevel(3, 67); // 67 - max
                }

          .section
            a(name="setmaxlevel")
            h4 water_sensor.setMaxLevel(raw_value)
            p
              | Add a value for the upper bounds of the last level.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  water_sensor.setMaxLevel(100); // max = 100
                }

          .section
            a(name="getrawvalue")
            h4
              | water_sensor.getRawValue()
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            p
              | Get the raw sensor value in order to calibrate each level with&nbsp;
              a.click-flash(href="#setlevel") setLevel()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(water_sensor.getRawValue());
                  water_sensor.update();
                }

          .section
            a(name="getactivelevel")
            h4
              | water_sensor.getActiveLevel()
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            p
              | Returns the current water level.
              ul
                li 0 means there is no water
                li 1 means the water is touching the first level
                li 2 means the water is touching the second level
                li n means the water is touching the nth level
                li sizeof(n) + 1 means the water is above the max level
                li -1 if an error was found in the input levels (non-contiguous range)
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  Serial.println(water_sensor.getActiveLevel());
                  water_sensor.update();
                }

          .section-bottom
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade


