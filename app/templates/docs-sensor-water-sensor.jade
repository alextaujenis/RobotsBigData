doctype html
html(lang='en')
  head
    title Robots + Big Data: Water Sensor Documentation
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .documentation.col-sm-9.col-lg-10
          ol.breadcrumb
            li
              a(href="index.html") Home
            li
              a(href="docs.html") Docs
            li.active
              | Water Sensor
          .jumbotron
            h2
              | Water Sensor
              small  API DOCUMENTATION
            p Measure and calibrate capacitance water sensors in real-time.
            a.btn.btn-success(href="#download") Download
            | &nbsp;&nbsp;
            a.btn.btn-default(href="#example-setup") See Example
            | &nbsp;&nbsp;
            a.btn.btn-default(href="#public-methods") Public Methods

          h3
            a(name="download")
            | Download
          p.lead
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors, or you can use this library outside of the package with three dependencies.
          p
            ul
              li
                a(href="#") Download Full Sensor Package
                |  with this library included
              li
                a(href="#") Download Water Sensor Library
                |  with Capacitance, Threshold, and Timer
              li
                a(href="#") View Source on GitHub
                |  with MIT license

          h3
            a(name="example-setup")
            | Example Setup
          p.lead
            ol
              li Bridge a 10Meg Ohm resistor across the send (tx 1) and receive (rx 0) pins
              li Run a length of wire from the receive (rx 0) pin to a strip of aluminum foil
              li Tape the foil to the side of a water-tight non-conductive (plastic) container
              li Load up the example sketch and open a serial connection at 115200 baud
              li Pour water into your container and change the raw threshold values in the sketch to match the levels
              li Pour out the water, then compile and load the calibrated sketch back into the Arduino
              li Your water level is calibrated and ready to use
          h3
            a(name="example-sketch")
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++


          script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
            :cdata
              #include <WaterSensor.h>
              #include <Capacitance.h>
              #include <Threshold.h>
              #include <Timer.h>

              #define BAUD        115200
              #define SEND_PIN    1
              #define RECEIVE_PIN 0
              #define LEVEL_COUNT 3

              int past_value  = 0;

              WaterSensor water_sensor(SEND_PIN, RECEIVE_PIN, LEVEL_COUNT);

              void setup() {
                Serial.begin(BAUD);
                water_sensor.setAccuracy(1000);
                water_sensor.setRefreshRate(2);
                water_sensor.setLevel(1, 120);
                water_sensor.setLevel(2, 154);
                water_sensor.setLevel(3, 187);
                water_sensor.setMaxLevel(220);
              }

              void loop() {
                water_sensor.update();

                if(water_sensor.getRawValue() != past_value) {
                  printValues(water_sensor.getActiveLevel(), water_sensor.getRawValue());
                  past_value = water_sensor.getRawValue();
                }
              }

              void printValues(int active_level, int raw_value) {
                Serial.print("ACTIVE LEVEL: ");
                Serial.print(active_level);
                Serial.print("  RAW VALUE: ");
                Serial.println(raw_value);
              }
          h3
            a(name="public-methods")
            | Public Methods
          h4.class-name
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                WaterSensor

          ul.public-methods
            li
              a.click-flash(href="#constructor") constructor(send_pin, receive_pin, level_count)
            li
              a.click-flash(href="#setaccuracy") .setAccuracy(value)
            li
              a.click-flash(href="#setrefreshrate") .setRefreshRate(hertz)
            li
              a.click-flash(href="#startrealtime") .startRealTime()
            li
              a.click-flash(href="#getrawvalue") .getRawValue()
            li
              a.click-flash(href="#setlevel") .setLevel(index, raw_value)
            li
              a.click-flash(href="#setmaxlevel") .setMaxLevel(raw_value)
            li
              a.click-flash(href="#getactivelevel") .getActiveLevel()

          .section
            a(name="constructor")
            h4 WaterSensor constructor(send_pin, receive_pin)
            p Create a new capacitance sensor and pass in the Arduino pin numbers for the send and receive pins.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                WaterSensor cap_sensor(1,0);

                void setup() {
                  ...
                }

          .section
            a(name="setsamplesize")
            h4 cap_sensor.setSampleSize(size)
            p
              | Pass in an integer to change the number of readings taken to calculate a moving average&nbsp;
              a.click-flash(href="#getvalue") getValue()
              | . This can be called inside of setup() or also safely at runtime inside of loop().
            ul
              li
                b Decrease Variation
                |  in readings by making this number larger: 1000
              li
                b Increase Variation
                |  in readings by making this number smaller: 10
              li
                b Default Value
                | : 100
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  cap_sensor.setSampleSize(1000);
                }

          .section
            a(name="start")
            h4 cap_sensor.start()
            p
              | Begin taking many readings and start adding up the moving average for&nbsp;
              a.click-flash(href="#getvalue") getValue()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  cap_sensor.start();
                }

          .section
            a(name="update")
            h4 cap_sensor.update()
            p This must be call continuously from within the loop() to move the library along in real-time.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  cap_sensor.update();
                }

          .section
            a(name="isfinished")
            h4 cap_sensor.isFinished()
            p
              | Returns true if all readings have been taken and a moving average&nbsp;
              a.click-flash(href="#getvalue") getValue()
              |  is ready. You must first call&nbsp;
              a.click-flash(href="#start") start()
              |   to begin the sampling process.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  cap_sensor.start();
                }

                void loop() {
                  cap_sensor.update();

                  if(cap_sensor.isFinished()) {
                    ...
                  }
                }

          .section
            a(name="getvalue")
            h4 cap_sensor.getValue()
            p
              | Returns an unsigned long of the moving average value for the capacitance reading (microseconds taken to charge the pin). This will only return a value after calling&nbsp;
              a.click-flash(href="#start") start()
              |  and waiting until&nbsp;
              a.click-flash(href="#isfinished") isFinished()
              |  has returned true.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  cap_sensor.start();
                }

                void loop() {
                  cap_sensor.update();

                  if(cap_sensor.isFinished()) {
                    Serial.println(cap_sensor.getValue());
                  }
                }

          .section-bottom
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade


