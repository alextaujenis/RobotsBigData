doctype html
html(lang='en')
  head
    title Robots + Big Data: Motor Documentation
    include ./global/head-content.jade
  body
    include ./global/top-nav.jade
    .container-fluid
      .row
        include ./global/docs-side-nav.jade
        .documentation.col-sm-8
          ol.breadcrumb.stuck
            li
              a(href="../index.html") Home
            li
              a(href="docs-arduino.html") Arduino
            li.active
              | Motor
            a.pull-right.edit-page(href="https://github.com/alextaujenis/RobotsBigData/edit/gh-pages/app/templates/docs-arduino-motor.jade", data-toggle="tooltip", data-placement="left", title="Edit this page on GitHub.") edit
          .jumbotron
            .stuck.click-through
              .row.jumbotron-header.click-through
                .col-xs-12.text-right.click-through
                  span.label.label-info.title-label Arduino
            .jumbotron-container
              h2
                | Motor
                small  API DOCUMENTATION
              p
                | Control many motors.
                small v1.0.0
              a.btn.btn-success(href="#download") Download
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#example-sketch") See Example
              | &nbsp;&nbsp;
              a.btn.btn-default(href="#public-methods") Public Methods
          h3
            a(name="overview")
            | Overview
          p.lead
            | Control many motors without delay using commands like&nbsp;
            a.click-flash(href="#on") on()
            | ,&nbsp;
            a.click-flash(href="#off") off()
            | ,&nbsp;
            a.click-flash(href="#timedon") timedOn()
            | , and&nbsp;
            a.click-flash(href="#ramp") ramp()
            | . Fire custom events when the motor has reached the target speed with&nbsp;
            a.click-flash(href="#ontargetspeed") onTargetSpeed()
            | . Motors must be correctly wired to PWM enabled Arduino pins to work with this library.
          h3
            a(name="download")
            | Download
          p
            | This library is part of a larger package that you can download to access
            i  all
            |  of the documented sensors,&nbsp;
            i or
            |  you can use this library by itself with one dependency.
          p
            ul
              li
                a(href="https://github.com/alextaujenis/RBD_Motor/raw/master/extras/RBD_Motor.zip")
                  | Download Motor Library v1.0.0&nbsp;
                  label.label.label-warning.zip-label .zip
                |  by itself with the&nbsp;
                a.dark-link(href="https://github.com/alextaujenis/RBD_Timer/raw/master/extras/RBD_Timer.zip") Timer
                |  dependency, or
              li
                a(href="install.html") Download All Sensor Libraries
                |  with this library and dependency included, or
              li
                a(href="https://github.com/alextaujenis/RBD_Motor") View Source on GitHub
                |  with&nbsp;
                a.dark-link(href="http://opensource.org/licenses/mit-license.php") MIT license
          h3
            a(name="example-sketch")
            | Example Sketch
            span.label.label-info Arduino
            span.label.label-primary C++


          script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
            :cdata
              #include <RBD_Timer.h>
              #include <RBD_Motor.h>

              RBD::Motor motor(3); // PWM pin 3

              void setup() {
                motor.rampUp(1000);
              }

              void loop() {
                motor.update();

                if(motor.onTargetSpeed()) {
                  if(motor.isOn()) {
                    motor.rampDown(1000);
                  }
                  if(motor.isOff()) {
                    motor.rampUp(1000);
                  }
                }
              }
          h3
            a(name="public-methods")
            | Public Methods

          p
            | You can use this library without calling&nbsp;
            a.click-flash(href="#update") update()
            |  and&nbsp;
            i most
            |  methods will function correctly. You must continuously call&nbsp;
            a.click-flash(href="#update") update()
            |  inside of loop() in order to use the
            span.label.label-success REAL-TIME
            |  methods tagged below.

          h4.class-name
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                RBD::Motor

          ul.public-methods
            li
              a.click-flash(href="#constructor") constructor(pin)
            hr.divider
            li
              a.click-flash(href="#on") .on()
            li
              a.click-flash(href="#off") .off()
            li
              a.click-flash(href="#setpwm") .setPwm(value)
            li
              a.click-flash(href="#setpwmpercent") .setPwmPercent(value)
            hr.divider
            li
              a.click-flash(href="#ison") .isOn()
            li
              a.click-flash(href="#isoff") .isOff()
            li
              a.click-flash(href="#getpwm") .getPwm()
            li
              a.click-flash(href="#getpwmpercent") .getPwmPercent()
            li
              a.click-flash(href="#ispwm") .isPwm(value)
            li
              a.click-flash(href="#ispwmpercent") .isPwmPercent(value)
            hr.divider
            li
              a.click-flash(href="#update") .update()
              span.label.label-primary(data-toggle="tooltip", data-placement="right", title="This helps move real-time methods along.") PROCESS REAL-TIME
            li
              a.click-flash(href="#timedon") .timedOn(timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            li
              a.click-flash(href="#rampup") .rampUp(timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            li
              a.click-flash(href="#rampdown") .rampDown(timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            li
              a.click-flash(href="#ramp") .ramp(value, timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            li
              a.click-flash(href="#ramppercent") .rampPercent(value, timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            hr.divider
            li
              a.click-flash(href="#ontargetspeed") .onTargetSpeed()
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
              span.label.label-default(data-toggle="tooltip", data-placement="right", title="Use this method to find when an event has been triggered.") EVENT

          .section
            a(name="constructor")
            h4 RBD::Motor constructor(pin)
            p Create a new motor and pass in the Arduino pin number.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                RBD::Motor motor(3); // pwm pin 3

                void setup() {
                  ...
                }

          .section
            a(name="on")
            h4 motor.on()
            p
              | Start the motor at full speed.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.on();
                }

          .section
            a(name="off")
            h4 motor.off()
            p Stop the motor.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.off();
                }

          .section
            a(name="setpwm")
            h4 motor.setPwm(value)
            p Pass in an integer from 0 - 255 to control the speed of the motor.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.setPwm(85); // one-third speed
                }

          .section
            a(name="setpwmpercent")
            h4 motor.setPwmPercent(value)
            p
              | Pass in an integer from 0 - 100 to control the speed percentage of the motor. This is essentially the same as&nbsp;
              a.click-flash(href="#setpwm") setPwm()
              |  but with a smaller input scale.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.setPwmPercent(50); // half speed
                }

          .section
            a(name="ison")
            h4 motor.isOn()
            p
              | Returns true if the motor is running at 100% speed.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.on();
                }

                void loop() {
                  Serial.println(motor.isOn());
                }

          .section
            a(name="isoff")
            h4 motor.isOff()
            p
              | Returns true if the motor is running at 0% speed.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.off();
                }

                void loop() {
                  Serial.println(motor.isOff());
                }

          .section
            a(name="getpwm")
            h4 motor.getPwm()
            p
              | Returns an integer from 0 - 255 for the current motor speed.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.setPwm(123);
                }

                void loop() {
                  Serial.println(motor.getPwm());
                }

          .section
            a(name="getpwmpercent")
            h4 motor.getPwmPercent()
            p
              | Returns an integer from 0 - 100 for the current motor speed percentage.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.setPwmPercent(45);
                }

                void loop() {
                  Serial.println(motor.getPwmPercent());
                }

          .section
            a(name="ispwm")
            h4 motor.isPwm(value)
            p
              | Provide an integer from 0 to 255 and this will return true if it's equal to the current&nbsp;
              a.click-flash(href="#getpwm") getPwm()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.ramp(99, 1000);
                }

                void loop() {
                  motor.update()

                  if(motor.onTargetSpeed()) {
                    if(motor.isPwm(99)) {
                      ...
                    }
                  }
                }

          .section
            a(name="ispwmpercent")
            h4 motor.isPwmPercent(value)
            p
              | Provide an integer from 0 to 100 and this will return true if it's equal to the current&nbsp;
              a.click-flash(href="#getpwmpercent") getPwmPercent()
              | .
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.rampPercent(45, 1000);
                }

                void loop() {
                  motor.update()

                  if(motor.onTargetSpeed()) {
                    if(motor.isPwmPercent(45)) {
                      ...
                    }
                  }
                }

          .section
            a(name="update")
            h4
              | motor.update()
              span.label.label-primary(data-toggle="tooltip", data-placement="right", title="This helps move real-time methods along.") PROCESS REAL-TIME
            p Keep the real-time functions processing with each loop().
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void loop() {
                  motor.update();
                }

          .section
            a(name="timedon")
            h4
              | motor.timedOn(timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            p
              | Start the motor at full speed and turn it off after the specified time in milliseconds.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.timedOn(5000);
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="rampup")
            h4
              | motor.rampUp(timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            p Pass in a timeout in milliseconds for how long it will take to ramp from the current speed to full speed with a linear transition.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.rampUp(3000);
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="rampdown")
            h4
              | motor.rampDown(timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            p Pass in a timeout in milliseconds for how long it will take to ramp from the current speed to full stop with a linear transition.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.on();
                  motor.rampDown(4000);
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="ramp")
            h4
              | motor.ramp(value, timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            p Pass in a value from 0 - 255 to control the target speed of the motor, and a timeout in milliseconds for how long it will take to ramp to that target speed from the current speed with a linear transition.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.ramp(85, 2000); // one-third speed in 2 seconds
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="ramppercent")
            h4
              | motor.rampPercent(value, timeout)
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
            p
              | Pass in a value from 0 - 100 to control the target speed of the motor, and a timeout in milliseconds for how long it will take to ramp to that target speed from the current speed with a linear transition. This is essentially the same as&nbsp;
              a.click-flash(href="#ramp") ramp()
              |  but with a smaller input scale.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.rampPercent(50, 1000); // half speed in 1 second
                }

                void loop() {
                  motor.update();
                }

          .section
            a(name="ontargetspeed")
            h4
              | motor.onTargetSpeed()
              span.label.label-success(data-toggle="tooltip", data-placement="right", title="You must continuously call update() to use this method.") REAL-TIME
              span.label.label-default(data-toggle="tooltip", data-placement="right", title="Use this method to find when an event has been triggered.") EVENT
            p
              | This method will return true once the motor hits the target speed set in any of the real-time methods. This method will return false until a new target speed is set (with a real-time method) and then achieved by the motor.
            h5 EXAMPLE SKETCH
            script(type="syntaxhighlighter", class="brush: cpp; gutter: false;")
              :cdata
                void setup() {
                  motor.off();
                  motor.rampPercent(50, 5000);
                }

                void loop() {
                  motor.update();

                  if(motor.onTargetSpeed()) {
                    // code only runs once per event
                    Serial.println("Target Speed");
                  }
                }

          .section-bottom
    include ./global/foot-content.jade
    include ./global/docs-foot-content.jade


